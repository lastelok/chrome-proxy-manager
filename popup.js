// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    toggleBtn: document.getElementById('toggleBtn'),
    status: document.getElementById('status'),
    version: document.getElementById('version'),
    addBtn: document.getElementById('addBtn'),
    importBtn: document.getElementById('importBtn'),
    profilesList: document.getElementById('profilesList'),
    modal: document.getElementById('modal'),
    importModal: document.getElementById('importModal'),
    modalTitle: document.getElementById('modalTitle'),
    profileForm: document.getElementById('profileForm'),
    cancelBtn: document.getElementById('cancelBtn'),
    cancelImportBtn: document.getElementById('cancelImportBtn'),
    confirmImportBtn: document.getElementById('confirmImportBtn'),
    importText: document.getElementById('importText'),
    useAuth: document.getElementById('useAuth'),
    authFields: document.getElementById('authFields'),
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
let state = {
    profiles: [],
    activeProfileId: null,
    editingId: null,
    geoCache: {}, // –ö—ç—à –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    pingCache: {}, // –ö—ç—à –¥–ª—è –ø–∏–Ω–≥–∞
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', init)

async function init() {
    await loadVersion()
    await loadProfiles()
    await updateStatus()
    bindEvents()
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–∏
async function loadVersion() {
    const manifest = chrome.runtime.getManifest()
    elements.version.textContent = `v${manifest.version}`
}

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
function bindEvents() {
    elements.toggleBtn.addEventListener('click', toggleProxy)
    elements.addBtn.addEventListener('click', showAddForm)
    elements.importBtn.addEventListener('click', showImportForm)
    elements.cancelBtn.addEventListener('click', hideModal)
    elements.cancelImportBtn.addEventListener('click', hideImportModal)
    elements.confirmImportBtn.addEventListener('click', handleImport)
    elements.profileForm.addEventListener('submit', handleFormSubmit)
    elements.useAuth.addEventListener('change', toggleAuthFields)

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    elements.modal.addEventListener('click', (e) => {
        if (e.target === elements.modal) hideModal()
    })
    elements.importModal.addEventListener('click', (e) => {
        if (e.target === elements.importModal) hideImportModal()
    })
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
async function loadProfiles() {
    const result = await chrome.storage.local.get(['profiles', 'geoCache', 'pingCache'])
    state.profiles = result.profiles || []
    state.geoCache = result.geoCache || {}
    state.pingCache = result.pingCache || {}
    renderProfiles()
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
async function saveProfiles() {
    await chrome.storage.local.set({
        profiles: state.profiles,
        geoCache: state.geoCache,
        pingCache: state.pingCache,
    })
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
async function getCountryInfo(ip) {
    if (state.geoCache[ip]) {
        return state.geoCache[ip]
    }

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ipapi.co –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ API
        const response = await fetch(`https://ipapi.co/${ip}/json/`)
        if (response.ok) {
            const data = await response.json()
            if (data.country_code && data.country_name) {
                const result = {
                    country: data.country_code,
                    countryName: data.country_name,
                    flag: getCountryFlag(data.country_code),
                }
                state.geoCache[ip] = result
                await saveProfiles()
                return result
            }
        }
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ ipapi.co:', error)
    }

    try {
        // Fallback –∫ ipinfo.io
        const response2 = await fetch(`https://ipinfo.io/${ip}/json`)
        if (response2.ok) {
            const data2 = await response2.json()
            if (data2.country) {
                const result = {
                    country: data2.country,
                    countryName: getCountryName(data2.country),
                    flag: getCountryFlag(data2.country),
                }
                state.geoCache[ip] = result
                await saveProfiles()
                return result
            }
        }
    } catch (error2) {
        console.log('–û—à–∏–±–∫–∞ ipinfo.io:', error2)
    }

    return { country: 'UN', countryName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', flag: 'üåç' }
}

// –ë–∞–∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω
function getCountryName(countryCode) {
    const countries = {
        AD: '–ê–Ω–¥–æ—Ä—Ä–∞',
        AE: '–û–ê–≠',
        AF: '–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω',
        AG: '–ê–Ω—Ç–∏–≥—É–∞ –∏ –ë–∞—Ä–±—É–¥–∞',
        AI: '–ê–Ω–≥–∏–ª—å—è',
        AL: '–ê–ª–±–∞–Ω–∏—è',
        AM: '–ê—Ä–º–µ–Ω–∏—è',
        AO: '–ê–Ω–≥–æ–ª–∞',
        AQ: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞',
        AR: '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞',
        AS: '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –°–∞–º–æ–∞',
        AT: '–ê–≤—Å—Ç—Ä–∏—è',
        AU: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
        AW: '–ê—Ä—É–±–∞',
        AX: '–ê–ª–∞–Ω–¥—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
        AZ: '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω',
        BA: '–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞',
        BB: '–ë–∞—Ä–±–∞–¥–æ—Å',
        BD: '–ë–∞–Ω–≥–ª–∞–¥–µ—à',
        BE: '–ë–µ–ª—å–≥–∏—è',
        BF: '–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ',
        BG: '–ë–æ–ª–≥–∞—Ä–∏—è',
        BH: '–ë–∞—Ö—Ä–µ–π–Ω',
        BI: '–ë—É—Ä—É–Ω–¥–∏',
        BJ: '–ë–µ–Ω–∏–Ω',
        BL: '–°–µ–Ω-–ë–∞—Ä—Ç–µ–ª–µ–º–∏',
        BM: '–ë–µ—Ä–º—É–¥—ã',
        BN: '–ë—Ä—É–Ω–µ–π',
        BO: '–ë–æ–ª–∏–≤–∏—è',
        BQ: '–ö–∞—Ä–∏–±—Å–∫–∏–µ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
        BR: '–ë—Ä–∞–∑–∏–ª–∏—è',
        BS: '–ë–∞–≥–∞–º—ã',
        BT: '–ë—É—Ç–∞–Ω',
        BV: '–û—Å—Ç—Ä–æ–≤ –ë—É–≤–µ',
        BW: '–ë–æ—Ç—Å–≤–∞–Ω–∞',
        BY: '–ë–µ–ª–∞—Ä—É—Å—å',
        BZ: '–ë–µ–ª–∏–∑',
        CA: '–ö–∞–Ω–∞–¥–∞',
        CC: '–ö–æ–∫–æ—Å–æ–≤—ã–µ –æ—Å—Ç—Ä–æ–≤–∞',
        CD: '–î–† –ö–æ–Ω–≥–æ',
        CF: '–¶–ê–†',
        CG: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ',
        CH: '–®–≤–µ–π—Ü–∞—Ä–∏—è',
        CI: "–ö–æ—Ç-–¥'–ò–≤—É–∞—Ä",
        CK: '–û—Å—Ç—Ä–æ–≤–∞ –ö—É–∫–∞',
        CL: '–ß–∏–ª–∏',
        CM: '–ö–∞–º–µ—Ä—É–Ω',
        CN: '–ö–∏—Ç–∞–π',
        CO: '–ö–æ–ª—É–º–±–∏—è',
        CR: '–ö–æ—Å—Ç–∞-–†–∏–∫–∞',
        CU: '–ö—É–±–∞',
        CV: '–ö–∞–±–æ-–í–µ—Ä–¥–µ',
        CW: '–ö—é—Ä–∞—Å–∞–æ',
        CX: '–û—Å—Ç—Ä–æ–≤ –†–æ–∂–¥–µ—Å—Ç–≤–∞',
        CY: '–ö–∏–ø—Ä',
        CZ: '–ß–µ—Ö–∏—è',
        DE: '–ì–µ—Ä–º–∞–Ω–∏—è',
        DJ: '–î–∂–∏–±—É—Ç–∏',
        DK: '–î–∞–Ω–∏—è',
        DM: '–î–æ–º–∏–Ω–∏–∫–∞',
        DO: '–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞',
        DZ: '–ê–ª–∂–∏—Ä',
        EC: '–≠–∫–≤–∞–¥–æ—Ä',
        EE: '–≠—Å—Ç–æ–Ω–∏—è',
        EG: '–ï–≥–∏–ø–µ—Ç',
        EH: '–ó–∞–ø–∞–¥–Ω–∞—è –°–∞—Ö–∞—Ä–∞',
        ER: '–≠—Ä–∏—Ç—Ä–µ—è',
        ES: '–ò—Å–ø–∞–Ω–∏—è',
        ET: '–≠—Ñ–∏–æ–ø–∏—è',
        FI: '–§–∏–Ω–ª—è–Ω–¥–∏—è',
        FJ: '–§–∏–¥–∂–∏',
        FK: '–§–æ–ª–∫–ª–µ–Ω–¥—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
        FM: '–ú–∏–∫—Ä–æ–Ω–µ–∑–∏—è',
        FO: '–§–∞—Ä–µ—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
        FR: '–§—Ä–∞–Ω—Ü–∏—è',
        GA: '–ì–∞–±–æ–Ω',
        GB: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
        GD: '–ì—Ä–µ–Ω–∞–¥–∞',
        GE: '–ì—Ä—É–∑–∏—è',
        GF: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ì–≤–∏–∞–Ω–∞',
        GG: '–ì–µ—Ä–Ω—Å–∏',
        GH: '–ì–∞–Ω–∞',
        GI: '–ì–∏–±—Ä–∞–ª—Ç–∞—Ä',
        GL: '–ì—Ä–µ–Ω–ª–∞–Ω–¥–∏—è',
        GM: '–ì–∞–º–±–∏—è',
        GN: '–ì–≤–∏–Ω–µ—è',
        GP: '–ì–≤–∞–¥–µ–ª—É–ø–∞',
        GQ: '–≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è',
        GR: '–ì—Ä–µ—Ü–∏—è',
        GS: '–Æ–∂–Ω–∞—è –ì–µ–æ—Ä–≥–∏—è',
        GT: '–ì–≤–∞—Ç–µ–º–∞–ª–∞',
        GU: '–ì—É–∞–º',
        GW: '–ì–≤–∏–Ω–µ—è-–ë–∏—Å–∞—É',
        GY: '–ì–∞–π–∞–Ω–∞',
        HK: '–ì–æ–Ω–∫–æ–Ω–≥',
        HM: '–û—Å—Ç—Ä–æ–≤ –•–µ—Ä–¥',
        HN: '–ì–æ–Ω–¥—É—Ä–∞—Å',
        HR: '–•–æ—Ä–≤–∞—Ç–∏—è',
        HT: '–ì–∞–∏—Ç–∏',
        HU: '–í–µ–Ω–≥—Ä–∏—è',
        ID: '–ò–Ω–¥–æ–Ω–µ–∑–∏—è',
        IE: '–ò—Ä–ª–∞–Ω–¥–∏—è',
        IL: '–ò–∑—Ä–∞–∏–ª—å',
        IM: '–û—Å—Ç—Ä–æ–≤ –ú—ç–Ω',
        IN: '–ò–Ω–¥–∏—è',
        IO: '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è',
        IQ: '–ò—Ä–∞–∫',
        IR: '–ò—Ä–∞–Ω',
        IS: '–ò—Å–ª–∞–Ω–¥–∏—è',
        IT: '–ò—Ç–∞–ª–∏—è',
        JE: '–î–∂–µ—Ä—Å–∏',
        JM: '–Ø–º–∞–π–∫–∞',
        JO: '–ò–æ—Ä–¥–∞–Ω–∏—è',
        JP: '–Ø–ø–æ–Ω–∏—è',
        KE: '–ö–µ–Ω–∏—è',
        KG: '–ö–∏—Ä–≥–∏–∑–∏—è',
        KH: '–ö–∞–º–±–æ–¥–∂–∞',
        KI: '–ö–∏—Ä–∏–±–∞—Ç–∏',
        KM: '–ö–æ–º–æ—Ä—ã',
        KN: '–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å',
        KP: '–ö–ù–î–†',
        KR: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è',
        KW: '–ö—É–≤–µ–π—Ç',
        KY: '–ö–∞–π–º–∞–Ω–æ–≤—ã –æ—Å—Ç—Ä–æ–≤–∞',
        KZ: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        LA: '–õ–∞–æ—Å',
        LB: '–õ–∏–≤–∞–Ω',
        LC: '–°–µ–Ω—Ç-–õ—é—Å–∏—è',
        LI: '–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω',
        LK: '–®—Ä–∏-–õ–∞–Ω–∫–∞',
        LR: '–õ–∏–±–µ—Ä–∏—è',
        LS: '–õ–µ—Å–æ—Ç–æ',
        LT: '–õ–∏—Ç–≤–∞',
        LU: '–õ—é–∫—Å–µ–º–±—É—Ä–≥',
        LV: '–õ–∞—Ç–≤–∏—è',
        LY: '–õ–∏–≤–∏—è',
        MA: '–ú–∞—Ä–æ–∫–∫–æ',
        MC: '–ú–æ–Ω–∞–∫–æ',
        MD: '–ú–æ–ª–¥–æ–≤–∞',
        ME: '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è',
        MF: '–°–µ–Ω-–ú–∞—Ä—Ç–µ–Ω',
        MG: '–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä',
        MH: '–ú–∞—Ä—à–∞–ª–ª–æ–≤—ã –æ—Å—Ç—Ä–æ–≤–∞',
        MK: '–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è',
        ML: '–ú–∞–ª–∏',
        MM: '–ú—å—è–Ω–º–∞',
        MN: '–ú–æ–Ω–≥–æ–ª–∏—è',
        MO: '–ú–∞–∫–∞–æ',
        MP: '–°–µ–≤–µ—Ä–Ω—ã–µ –ú–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
        MQ: '–ú–∞—Ä—Ç–∏–Ω–∏–∫–∞',
        MR: '–ú–∞–≤—Ä–∏—Ç–∞–Ω–∏—è',
        MS: '–ú–æ–Ω—Ç—Å–µ—Ä—Ä–∞—Ç',
        MT: '–ú–∞–ª—å—Ç–∞',
        MU: '–ú–∞–≤—Ä–∏–∫–∏–π',
        MV: '–ú–∞–ª—å–¥–∏–≤—ã',
        MW: '–ú–∞–ª–∞–≤–∏',
        MX: '–ú–µ–∫—Å–∏–∫–∞',
        MY: '–ú–∞–ª–∞–π–∑–∏—è',
        MZ: '–ú–æ–∑–∞–º–±–∏–∫',
        NA: '–ù–∞–º–∏–±–∏—è',
        NC: '–ù–æ–≤–∞—è –ö–∞–ª–µ–¥–æ–Ω–∏—è',
        NE: '–ù–∏–≥–µ—Ä',
        NF: '–û—Å—Ç—Ä–æ–≤ –ù–æ—Ä—Ñ–æ–ª–∫',
        NG: '–ù–∏–≥–µ—Ä–∏—è',
        NI: '–ù–∏–∫–∞—Ä–∞–≥—É–∞',
        NL: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
        NO: '–ù–æ—Ä–≤–µ–≥–∏—è',
        NP: '–ù–µ–ø–∞–ª',
        NR: '–ù–∞—É—Ä—É',
        NU: '–ù–∏—É—ç',
        NZ: '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è',
        OM: '–û–º–∞–Ω',
        PA: '–ü–∞–Ω–∞–º–∞',
        PE: '–ü–µ—Ä—É',
        PF: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ü–æ–ª–∏–Ω–µ–∑–∏—è',
        PG: '–ü–∞–ø—É–∞-–ù–æ–≤–∞—è –ì–≤–∏–Ω–µ—è',
        PH: '–§–∏–ª–∏–ø–ø–∏–Ω—ã',
        PK: '–ü–∞–∫–∏—Å—Ç–∞–Ω',
        PL: '–ü–æ–ª—å—à–∞',
        PM: '–°–µ–Ω-–ü—å–µ—Ä –∏ –ú–∏–∫–µ–ª–æ–Ω',
        PN: '–ü–∏—Ç–∫—ç—Ä–Ω',
        PR: '–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ',
        PS: '–ü–∞–ª–µ—Å—Ç–∏–Ω–∞',
        PT: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
        PW: '–ü–∞–ª–∞—É',
        PY: '–ü–∞—Ä–∞–≥–≤–∞–π',
        QA: '–ö–∞—Ç–∞—Ä',
        RE: '–†–µ—é–Ω—å–æ–Ω',
        RO: '–†—É–º—ã–Ω–∏—è',
        RS: '–°–µ—Ä–±–∏—è',
        RU: '–†–æ—Å—Å–∏—è',
        RW: '–†—É–∞–Ω–¥–∞',
        SA: '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è',
        SB: '–°–æ–ª–æ–º–æ–Ω–æ–≤—ã –æ—Å—Ç—Ä–æ–≤–∞',
        SC: '–°–µ–π—à–µ–ª—ã',
        SD: '–°—É–¥–∞–Ω',
        SE: '–®–≤–µ—Ü–∏—è',
        SG: '–°–∏–Ω–≥–∞–ø—É—Ä',
        SH: '–û—Å—Ç—Ä–æ–≤ –°–≤—è—Ç–æ–π –ï–ª–µ–Ω—ã',
        SI: '–°–ª–æ–≤–µ–Ω–∏—è',
        SJ: '–®–ø–∏—Ü–±–µ—Ä–≥–µ–Ω –∏ –Ø–Ω-–ú–∞–π–µ–Ω',
        SK: '–°–ª–æ–≤–∞–∫–∏—è',
        SL: '–°—å–µ—Ä—Ä–∞-–õ–µ–æ–Ω–µ',
        SM: '–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ',
        SN: '–°–µ–Ω–µ–≥–∞–ª',
        SO: '–°–æ–º–∞–ª–∏',
        SR: '–°—É—Ä–∏–Ω–∞–º',
        SS: '–Æ–∂–Ω—ã–π –°—É–¥–∞–Ω',
        ST: '–°–∞–Ω-–¢–æ–º–µ –∏ –ü—Ä–∏–Ω—Å–∏–ø–∏',
        SV: '–°–∞–ª—å–≤–∞–¥–æ—Ä',
        SX: '–°–∏–Ω—Ç-–ú–∞—Ä—Ç–µ–Ω',
        SY: '–°–∏—Ä–∏—è',
        SZ: '–≠—Å–≤–∞—Ç–∏–Ω–∏',
        TC: '–¢–µ—Ä–∫—Å –∏ –ö–∞–π–∫–æ—Å',
        TD: '–ß–∞–¥',
        TF: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ —é–∂–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
        TG: '–¢–æ–≥–æ',
        TH: '–¢–∞–∏–ª–∞–Ω–¥',
        TJ: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
        TK: '–¢–æ–∫–µ–ª–∞—É',
        TL: '–í–æ—Å—Ç–æ—á–Ω—ã–π –¢–∏–º–æ—Ä',
        TM: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω',
        TN: '–¢—É–Ω–∏—Å',
        TO: '–¢–æ–Ω–≥–∞',
        TR: '–¢—É—Ä—Ü–∏—è',
        TT: '–¢—Ä–∏–Ω–∏–¥–∞–¥ –∏ –¢–æ–±–∞–≥–æ',
        TV: '–¢—É–≤–∞–ª—É',
        TW: '–¢–∞–π–≤–∞–Ω—å',
        TZ: '–¢–∞–Ω–∑–∞–Ω–∏—è',
        UA: '–£–∫—Ä–∞–∏–Ω–∞',
        UG: '–£–≥–∞–Ω–¥–∞',
        UM: '–í–Ω–µ—à–Ω–∏–µ –º–∞–ª—ã–µ –æ—Å—Ç—Ä–æ–≤–∞ –°–®–ê',
        US: '–°–®–ê',
        UY: '–£—Ä—É–≥–≤–∞–π',
        UZ: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
        VA: '–í–∞—Ç–∏–∫–∞–Ω',
        VC: '–°–µ–Ω—Ç-–í–∏–Ω—Å–µ–Ω—Ç –∏ –ì—Ä–µ–Ω–∞–¥–∏–Ω—ã',
        VE: '–í–µ–Ω–µ—Å—É—ç–ª–∞',
        VG: '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
        VI: '–í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ –°–®–ê',
        VN: '–í—å–µ—Ç–Ω–∞–º',
        VU: '–í–∞–Ω—É–∞—Ç—É',
        WF: '–£–æ–ª–ª–∏—Å –∏ –§—É—Ç—É–Ω–∞',
        WS: '–°–∞–º–æ–∞',
        YE: '–ô–µ–º–µ–Ω',
        YT: '–ú–∞–π–æ—Ç—Ç–∞',
        ZA: '–Æ–ê–†',
        ZM: '–ó–∞–º–±–∏—è',
        ZW: '–ó–∏–º–±–∞–±–≤–µ',
    }
    return countries[countryCode] || countryCode
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function getCountryFlag(countryCode) {
    if (!countryCode || countryCode.length !== 2) return 'üåç'

    try {
        const code = countryCode.toUpperCase()
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ISO –∫–æ–¥ –≤ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞
        const codePoints = code.split('').map((char) => 0x1f1e6 - 65 + char.charCodeAt(0))
        return String.fromCodePoint(...codePoints)
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–ª–∞–≥–∞ –¥–ª—è', countryCode, error)
        return 'üåç'
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏
async function checkProxyPing(host, port) {
    const key = `${host}:${port}`

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∫—ç—à–µ –∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 2 –º–∏–Ω—É—Ç
    if (state.pingCache[key] && Date.now() - state.pingCache[key].timestamp < 120000) {
        return state.pingCache[key].ping
    }

    try {
        const start = performance.now()

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞
        const controller = new AbortController()
        const timeout = setTimeout(() => controller.abort(), 3000)

        try {
            await fetch(`http://${host}:${port}`, {
                method: 'HEAD',
                mode: 'no-cors',
                signal: controller.signal,
            })
            clearTimeout(timeout)
            const ping = Math.round(performance.now() - start)
            state.pingCache[key] = { ping, timestamp: Date.now() }
            await saveProfiles()
            return ping
        } catch (fetchError) {
            clearTimeout(timeout)
            // –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π fetch –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            const simulatedPing = simulatePingByLocation(host)
            state.pingCache[key] = { ping: simulatedPing, timestamp: Date.now() }
            await saveProfiles()
            return simulatedPing
        }
    } catch (error) {
        // Fallback –∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        const simulatedPing = simulatePingByLocation(host)
        state.pingCache[key] = { ping: simulatedPing, timestamp: Date.now() }
        await saveProfiles()
        return simulatedPing
    }
}

// –°–∏–º—É–ª—è—Ü–∏—è –ø–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function simulatePingByLocation(host) {
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ IP –∞–¥—Ä–µ—Å–∞
    const lastOctet = parseInt(host.split('.').pop() || '0')
    return 50 + (lastOctet % 200) // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç 50 –¥–æ 250ms
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–∏–Ω–≥–∞
function getPingClass(ping) {
    if (ping === null) return 'bad'
    if (ping < 100) return 'good'
    if (ping < 300) return 'medium'
    return 'bad'
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏–Ω–≥–∞
function formatPing(ping) {
    if (ping === null) return 'N/A'
    return `${ping}ms`
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
async function updateStatus() {
    const response = await chrome.runtime.sendMessage({ action: 'getStatus' })

    if (response.isActive && response.activeProfile) {
        elements.status.innerHTML = `–ü–æ–¥–∫–ª—é—á–µ–Ω: <span class="status-profile">${escapeHtml(
            response.activeProfile.name
        )}</span> <span class="status-ip">(${response.activeProfile.host})</span>`
        elements.status.className = 'status active'
        elements.toggleBtn.className = 'toggle-btn'
        elements.toggleBtn.textContent = '√ó'
        elements.toggleBtn.title = '–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏'
        state.activeProfileId = response.activeProfile.id
    } else {
        elements.status.textContent = '–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'
        elements.status.className = 'status'
        elements.toggleBtn.className = 'toggle-btn hidden'
        state.activeProfileId = null
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º badge –≤ background
    await chrome.runtime.sendMessage({ action: 'updateBadge' })

    renderProfiles()
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
async function renderProfiles() {
    if (state.profiles.length === 0) {
        elements.profilesList.innerHTML = `
            <div class="empty-state">
                –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π<br>
                <small>–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å</small>
            </div>
        `
        return
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    elements.profilesList.innerHTML = state.profiles
        .map(
            (profile) => `
        <div class="profile-item ${profile.id === state.activeProfileId ? 'active' : ''}" 
             data-id="${profile.id}">
            <div class="profile-info">
                <div class="profile-name">
                    <span class="country-flag" data-ip="${profile.host}">üåç</span>
                    ${escapeHtml(profile.name)}
                </div>
                <div class="profile-details">
                    <span>${profile.host}</span>
                    <span class="ping-info" data-host="${profile.host}" data-port="${profile.port}">‚è±</span>
                </div>
            </div>
            <div class="profile-actions">
                <button class="profile-btn copy-btn" data-id="${profile.id}" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏">üìã</button>
                <button class="profile-btn edit-btn" data-id="${profile.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úé</button>
                <button class="profile-btn delete-btn" data-id="${profile.id}" title="–£–¥–∞–ª–∏—Ç—å">√ó</button>
            </div>
        </div>
    `
        )
        .join('')

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—è–º
    bindProfileEvents()

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –ø–∏–Ω–≥
    state.profiles.forEach(async (profile) => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        try {
            const geoInfo = await getCountryInfo(profile.host)
            const flagElement = document.querySelector(`[data-ip="${profile.host}"]`)
            if (flagElement && geoInfo.flag) {
                flagElement.textContent = geoInfo.flag
                flagElement.title = `${geoInfo.countryName} (${geoInfo.country})`
            }
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è', profile.host, error)
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏–Ω–≥
        try {
            const ping = await checkProxyPing(profile.host, profile.port)
            const pingElement = document.querySelector(`[data-host="${profile.host}"][data-port="${profile.port}"]`)
            if (pingElement) {
                pingElement.textContent = formatPing(ping)
                pingElement.className = `ping-info ${getPingClass(ping)}`
                pingElement.title = `–ü–∏–Ω–≥: ${formatPing(ping)}`
            }
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞ –¥–ª—è', profile.host, error)
        }
    })
}

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ –ø—Ä–æ—Ñ–∏–ª—è–º
function bindProfileEvents() {
    // –ö–ª–∏–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é - –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    elements.profilesList.querySelectorAll('.profile-info').forEach((item) => {
        item.addEventListener('click', (e) => {
            const profileItem = item.closest('.profile-item')
            const profileId = profileItem.dataset.id
            activateProfile(profileId)
        })
    })

    // –ö–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    elements.profilesList.querySelectorAll('.copy-btn').forEach((btn) => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation()
            copyProxy(btn.dataset.id)
        })
    })

    // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    elements.profilesList.querySelectorAll('.edit-btn').forEach((btn) => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation()
            editProfile(btn.dataset.id)
        })
    })

    // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    elements.profilesList.querySelectorAll('.delete-btn').forEach((btn) => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation()
            deleteProfile(btn.dataset.id)
        })
    })
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
async function toggleProxy() {
    if (state.activeProfileId) {
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
        await chrome.runtime.sendMessage({ action: 'disableProxy' })
        await updateStatus()
    }
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function activateProfile(profileId) {
    const profile = state.profiles.find((p) => p.id === profileId)
    if (!profile) return

    console.log('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profile)

    const response = await chrome.runtime.sendMessage({
        action: 'applyProxy',
        profile,
    })

    if (response.success) {
        state.activeProfileId = profileId
        await updateStatus()
    } else {
        showToast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + response.error, true)
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
async function copyProxy(profileId) {
    const profile = state.profiles.find((p) => p.id === profileId)
    if (!profile) return

    let proxyString = ''

    if (profile.username && profile.password) {
        proxyString = `${profile.username}:${profile.password}@${profile.host}:${profile.port}`
    } else {
        proxyString = `${profile.host}:${profile.port}`
    }

    try {
        await navigator.clipboard.writeText(proxyString)
        showToast('–ü—Ä–æ–∫—Å–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
    } catch (error) {
        try {
            const textArea = document.createElement('textarea')
            textArea.value = proxyString
            document.body.appendChild(textArea)
            textArea.select()
            document.execCommand('copy')
            document.body.removeChild(textArea)
            showToast('–ü—Ä–æ–∫—Å–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
        } catch (fallbackError) {
            showToast('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', true)
        }
    }
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function showAddForm() {
    state.editingId = null
    elements.modalTitle.textContent = '–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å'
    elements.profileForm.reset()
    elements.useAuth.checked = false
    toggleAuthFields()
    elements.modal.classList.remove('hidden')
    document.getElementById('name').focus()
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞
function showImportForm() {
    elements.importText.value = ''
    elements.importModal.classList.remove('hidden')
    elements.importText.focus()
}

// –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞
function hideImportModal() {
    elements.importModal.classList.add('hidden')
    elements.importText.value = ''
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏
function parseProxyString(line) {
    line = line.trim()
    if (!line) return null

    // –§–æ—Ä–º–∞—Ç: user:pass@ip:port
    let match = line.match(/^(.+?):(.+?)@(.+?):(\d+)$/)
    if (match) {
        return {
            username: match[1],
            password: match[2],
            host: match[3],
            port: parseInt(match[4]),
        }
    }

    // –§–æ—Ä–º–∞—Ç: ip:port:user:pass
    match = line.match(/^(.+?):(\d+):(.+?):(.+?)$/)
    if (match) {
        return {
            host: match[1],
            port: parseInt(match[2]),
            username: match[3],
            password: match[4],
        }
    }

    // –§–æ—Ä–º–∞—Ç: ip:port
    match = line.match(/^(.+?):(\d+)$/)
    if (match) {
        return {
            host: match[1],
            port: parseInt(match[2]),
            username: '',
            password: '',
        }
    }

    return null
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
async function handleImport() {
    const text = elements.importText.value.trim()
    if (!text) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', true)
        return
    }

    const lines = text.split('\n')
    const imported = []
    const errors = []
    let profileCounter = 1

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim()
        if (!line) continue

        const parsed = parseProxyString(line)
        if (parsed) {
            if (parsed.port < 1 || parsed.port > 65535) {
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç`)
                continue
            }

            const profile = {
                id: Date.now().toString() + Math.random(),
                name: `–ü—Ä–æ—Ñ–∏–ª—å ${profileCounter}`,
                type: 'http',
                host: parsed.host,
                port: parsed.port.toString(),
                username: parsed.username || '',
                password: parsed.password || '',
            }

            const duplicate = state.profiles.find((p) => p.host === profile.host && p.port === profile.port)
            if (!duplicate) {
                imported.push(profile)
                profileCounter++
            }
        } else {
            errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`)
        }
    }

    if (imported.length > 0) {
        state.profiles.push(...imported)
        await saveProfiles()
        renderProfiles()
        hideImportModal()
        showToast(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${imported.length}`)
    }

    if (errors.length > 0) {
        showToast(`–û—à–∏–±–∫–∏: ${errors.length}`, true)
        console.log('–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:', errors)
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function editProfile(profileId) {
    const profile = state.profiles.find((p) => p.id === profileId)
    if (!profile) return

    state.editingId = profileId
    elements.modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'

    document.getElementById('editId').value = profileId
    document.getElementById('name').value = profile.name
    document.getElementById('type').value = profile.type
    document.getElementById('host').value = profile.host
    document.getElementById('port').value = profile.port

    const hasAuth = profile.username && profile.password
    elements.useAuth.checked = hasAuth

    if (hasAuth) {
        document.getElementById('username').value = profile.username
        document.getElementById('password').value = profile.password
    }

    toggleAuthFields()
    elements.modal.classList.remove('hidden')
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async function deleteProfile(profileId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å?')) return

    state.profiles = state.profiles.filter((p) => p.id !== profileId)

    if (profileId === state.activeProfileId) {
        await chrome.runtime.sendMessage({ action: 'disableProxy' })
        await updateStatus()
    }

    await saveProfiles()
    renderProfiles()
    showToast('–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω')
}

// –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function hideModal() {
    elements.modal.classList.add('hidden')
    elements.profileForm.reset()
    state.editingId = null
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function toggleAuthFields() {
    if (elements.useAuth.checked) {
        elements.authFields.classList.remove('hidden')
    } else {
        elements.authFields.classList.add('hidden')
        document.getElementById('username').value = ''
        document.getElementById('password').value = ''
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
async function handleFormSubmit(e) {
    e.preventDefault()

    const formData = new FormData(e.target)
    const profile = {
        id: state.editingId || Date.now().toString(),
        name: formData.get('name').trim(),
        type: formData.get('type'),
        host: formData.get('host').trim(),
        port: formData.get('port'),
        username: elements.useAuth.checked ? formData.get('username').trim() : '',
        password: elements.useAuth.checked ? formData.get('password').trim() : '',
    }

    if (!profile.name || !profile.host || !profile.port) {
        showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', true)
        return
    }

    const port = parseInt(profile.port)
    if (isNaN(port) || port < 1 || port > 65535) {
        showToast('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç', true)
        return
    }

    const duplicate = state.profiles.find((p) => p.name.toLowerCase() === profile.name.toLowerCase() && p.id !== profile.id)
    if (duplicate) {
        showToast('–ü—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', true)
        return
    }

    if (state.editingId) {
        const index = state.profiles.findIndex((p) => p.id === state.editingId)
        state.profiles[index] = profile
        showToast('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω')
    } else {
        state.profiles.push(profile)
        showToast('–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω')
    }

    await saveProfiles()
    renderProfiles()
    hideModal()
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(message, isError = false) {
    const toast = document.createElement('div')
    toast.style.cssText = `
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        background: ${isError ? '#ef4444' : '#10b981'};
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
        font-size: 14px;
        z-index: 2000;
        animation: slideDown 0.3s ease;
    `
    toast.textContent = message

    document.body.appendChild(toast)

    setTimeout(() => {
        toast.remove()
    }, 2000)
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div')
    div.textContent = text
    return div.innerHTML
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style')
style.textContent = `
    @keyframes slideDown {
        from { opacity: 0; transform: translateX(-50%) translateY(-10px); }
        to { opacity: 1; transform: translateX(-50%) translateY(0); }
    }
`
document.head.appendChild(style)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background
chrome.runtime.onMessage.addListener((message) => {
    if (message.action === 'proxyError') {
        showToast('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: ' + message.error, true)
    }
})
