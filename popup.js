// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function showConfirmDialog(message, callback = null) {
    confirmMessage.textContent = message
    confirmCallback = callback
    confirmModal.classList.remove('hidden')

    // –ï—Å–ª–∏ –Ω–µ—Ç callback, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –û–ö
    if (!callback) {
        confirmYes.textContent = '–û–ö'
        confirmNo.style.display = 'none'
    } else {
        confirmYes.textContent = '–î–∞'
        confirmNo.style.display = 'block'
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function handleConfirmYes() {
    confirmModal.classList.add('hidden')
    if (confirmCallback) {
        confirmCallback()
    }
    confirmCallback = null
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    confirmYes.textContent = '–î–∞'
    confirmNo.style.display = 'block'
}

function handleConfirmNo() {
    confirmModal.classList.add('hidden')
    confirmCallback = null
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    confirmYes.textContent = '–î–∞'
    confirmNo.style.display = 'block'
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
function exportProfiles() {
    if (profiles.length === 0) {
        alert('–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
        return
    }

    let exportText = ''
    profiles.forEach((profile) => {
        let line = ''

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        line += profile.name + ': '

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –µ—Å–ª–∏ –Ω–µ HTTP
        if (profile.type && profile.type !== 'http') {
            line += profile.type.toUpperCase() + ' '
        }

        // –§–æ—Ä–º–∞—Ç user:pass@ip:port –∏–ª–∏ ip:port
        if (profile.username && profile.password) {
            line += `${profile.username}:${profile.password}@${profile.host}:${profile.port}`
        } else {
            line += `${profile.host}:${profile.port}`
        }

        exportText += line + '\n'
    })

    // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const blob = new Blob([exportText], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `proxy-by-last-export-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showConfirmDialog(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profiles.length}\n\n–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫.`, null)
}

// –û—Ç–∫—Ä—ã—Ç—å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function openInSidePanel() {
    chrome.windows.getCurrent((window) => {
        chrome.runtime.sendMessage({
            action: 'openSidePanel',
            windowId: window.id,
        })
    })
}

// –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
function openInFullscreen() {
    chrome.tabs.create({
        url: chrome.runtime.getURL('popup.html'),
    })
} // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const statusIndicator = document.getElementById('statusIndicator')
const profilesList = document.getElementById('profilesList')
const addProfileBtn = document.getElementById('addProfileBtn')
const profileForm = document.getElementById('profileForm')
const proxyForm = document.getElementById('proxyForm')
const cancelBtn = document.getElementById('cancelBtn')
const disableProxyBtn = document.getElementById('disableProxyBtn')
const quickDisableBtn = document.getElementById('quickDisableBtn')
const formTitle = document.getElementById('formTitle')
const importBtn = document.getElementById('importBtn')
const exportBtn = document.getElementById('exportBtn')
const importForm = document.getElementById('importForm')
const importText = document.getElementById('importText')
const processImportBtn = document.getElementById('processImportBtn')
const cancelImportBtn = document.getElementById('cancelImportBtn')
const confirmModal = document.getElementById('confirmModal')
const confirmMessage = document.getElementById('confirmMessage')
const confirmYes = document.getElementById('confirmYes')
const confirmNo = document.getElementById('confirmNo')
const openSidePanelBtn = document.getElementById('openSidePanelBtn')
const openFullscreenBtn = document.getElementById('openFullscreenBtn')

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
let profiles = []
let activeProfileId = null
let editingProfileId = null
let confirmCallback = null

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    loadProfiles()
    updateStatus()

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    addProfileBtn.addEventListener('click', showAddProfileForm)
    cancelBtn.addEventListener('click', hideProfileForm)
    proxyForm.addEventListener('submit', handleFormSubmit)
    disableProxyBtn.addEventListener('click', handleDisableProxy)
    quickDisableBtn.addEventListener('click', handleDisableProxy)
    importBtn.addEventListener('click', showImportForm)
    exportBtn.addEventListener('click', exportProfiles)
    processImportBtn.addEventListener('click', processImport)
    cancelImportBtn.addEventListener('click', hideImportForm)
    confirmYes.addEventListener('click', handleConfirmYes)
    confirmNo.addEventListener('click', handleConfirmNo)
    openSidePanelBtn.addEventListener('click', openInSidePanel)
    openFullscreenBtn.addEventListener('click', openInFullscreen)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === 'proxyError') {
        showConfirmDialog(`–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:\n${message.error}`, null)
    }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
function handleDisableProxy() {
    if (activeProfileId) {
        showConfirmDialog('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏?', () => disableProxy())
    } else {
        disableProxy()
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
function loadProfiles() {
    chrome.storage.local.get(['profiles', 'activeProfileId'], (result) => {
        profiles = result.profiles || []
        activeProfileId = result.activeProfileId || null

        renderProfiles()
        updateDisableButton()
    })
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
function saveProfiles() {
    chrome.storage.local.set({ profiles, activeProfileId })
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
function updateDisableButton() {
    const bottomSection = document.querySelector('.bottom-section')
    if (activeProfileId) {
        bottomSection.style.display = 'block'
        quickDisableBtn.classList.remove('hidden')
    } else {
        bottomSection.style.display = 'none'
        quickDisableBtn.classList.add('hidden')
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function updateStatus() {
    chrome.runtime.sendMessage({ action: 'getStatus' }, (response) => {
        const statusText = statusIndicator.querySelector('.status-text')

        if (response && response.isActive && response.currentProfile) {
            statusIndicator.classList.add('active')
            statusIndicator.classList.remove('direct')
            statusText.textContent = `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${response.currentProfile.name}`
            activeProfileId = response.currentProfile.id
            quickDisableBtn.classList.remove('hidden')
            updateDisableButton()
        } else {
            statusIndicator.classList.remove('active')
            statusIndicator.classList.add('direct')
            statusText.textContent = '–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'
            activeProfileId = null
            quickDisableBtn.classList.add('hidden')
            updateDisableButton()
        }

        renderProfiles()
    })
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
function renderProfiles() {
    profilesList.innerHTML = ''

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
    const profilesCount = document.getElementById('profilesCount')
    if (profilesCount) {
        profilesCount.textContent = profiles.length > 0 ? `(${profiles.length})` : ''
    }

    if (profiles.length === 0) {
        profilesList.innerHTML = '<div class="empty-message">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π</div>'
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
        const hint = document.querySelector('.profiles-hint')
        if (hint) hint.style.display = 'none'
        return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–æ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
    const hint = document.querySelector('.profiles-hint')
    if (hint) hint.style.display = 'block'

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ –∏–º–µ–Ω–∏
    const sortedProfiles = [...profiles].sort((a, b) => a.name.localeCompare(b.name))

    sortedProfiles.forEach((profile) => {
        const profileItem = document.createElement('div')
        profileItem.className = 'profile-item'
        profileItem.dataset.id = profile.id

        if (profile.id === activeProfileId) {
            profileItem.classList.add('active')
        }

        profileItem.innerHTML = `
        <div class="profile-info">
          <div class="profile-name">${profile.name}</div>
          <div class="profile-details">
            <span class="profile-type">${(profile.type || 'HTTP').toUpperCase()}</span>
            ${profile.host}:${profile.port}
            ${profile.username ? '<span class="auth-badge">üîê</span>' : ''}
          </div>
        </div>
        <div class="profile-actions">
          <button class="btn btn-small btn-secondary copy-btn" data-id="${profile.id}" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">üìã</button>
          <button class="btn btn-small btn-primary edit-btn" data-id="${profile.id}">‚úèÔ∏è</button>
          <button class="btn btn-small btn-danger delete-btn" data-id="${profile.id}">üóëÔ∏è</button>
        </div>
      `

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –≤–µ—Å—å —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profileItem.addEventListener('click', (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –±—ã–ª –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if (!e.target.closest('.profile-actions')) {
                activateProfile(profile.id)
            }
        })

        const copyBtn = profileItem.querySelector('.copy-btn')
        copyBtn.addEventListener('click', (e) => {
            e.stopPropagation()
            copyProfile(profile)
        })

        const editBtn = profileItem.querySelector('.edit-btn')
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation()
            editProfile(profile.id)
        })

        const deleteBtn = profileItem.querySelector('.delete-btn')
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation()
            deleteProfile(profile.id)
        })

        profilesList.appendChild(profileItem)
    })
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function activateProfile(profileId) {
    const profile = profiles.find((p) => p.id === profileId)
    if (!profile) return

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const profileItem = document.querySelector(`[data-id="${profileId}"]`)
    if (profileItem) {
        profileItem.style.opacity = '0.6'
        profileItem.style.pointerEvents = 'none'
    }

    chrome.runtime.sendMessage(
        {
            action: 'applyProxy',
            profile: profile,
        },
        (response) => {
            if (response && response.success) {
                activeProfileId = profileId
                saveProfiles()
                renderProfiles()
                updateStatus()
                updateDisableButton()
            } else {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                if (profileItem) {
                    profileItem.style.opacity = '1'
                    profileItem.style.pointerEvents = 'auto'
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
                if (chrome.runtime.lastError) {
                    showConfirmDialog(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏:\n${chrome.runtime.lastError.message}`, null)
                }
            }
        }
    )
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
function disableProxy() {
    chrome.runtime.sendMessage({ action: 'disableProxy' }, (response) => {
        if (response && response.success) {
            activeProfileId = null
            saveProfiles()
            renderProfiles()
            updateStatus()
            updateDisableButton()
        }
    })
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function showAddProfileForm() {
    editingProfileId = null
    formTitle.textContent = '–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å'
    proxyForm.reset()
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
    document.getElementById('proxyType').value = 'http'
    profileForm.classList.remove('hidden')
    addProfileBtn.style.display = 'none'
}

// –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
function hideProfileForm() {
    profileForm.classList.add('hidden')
    addProfileBtn.style.display = 'block'
    proxyForm.reset()
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyProfile(profile) {
    let text = ''

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –µ—Å–ª–∏ –Ω–µ HTTP
    if (profile.type && profile.type !== 'http') {
        text += profile.type.toUpperCase() + ' '
    }

    if (profile.username && profile.password) {
        text += `${profile.username}:${profile.password}@${profile.host}:${profile.port}`
    } else {
        text += `${profile.host}:${profile.port}`
    }

    navigator.clipboard
        .writeText(text)
        .then(() => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const btn = document.querySelector(`.copy-btn[data-id="${profile.id}"]`)
            const originalText = btn.textContent
            btn.textContent = '‚úì'
            btn.style.background = 'var(--success-color)'
            btn.style.color = 'white'

            setTimeout(() => {
                btn.textContent = originalText
                btn.style.background = ''
                btn.style.color = ''
            }, 1000)
        })
        .catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err)
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
        })
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function editProfile(profileId) {
    const profile = profiles.find((p) => p.id === profileId)
    if (!profile) return

    editingProfileId = profileId
    formTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    document.getElementById('profileName').value = profile.name
    document.getElementById('proxyType').value = profile.type || 'http'
    document.getElementById('proxyHost').value = profile.host
    document.getElementById('proxyPort').value = profile.port
    document.getElementById('proxyUsername').value = profile.username || ''
    document.getElementById('proxyPassword').value = profile.password || ''

    profileForm.classList.remove('hidden')
    addProfileBtn.style.display = 'none'
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function deleteProfile(profileId) {
    showConfirmDialog('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å?', () => {
        profiles = profiles.filter((p) => p.id !== profileId)

        if (activeProfileId === profileId) {
            disableProxy()
        }

        saveProfiles()
        renderProfiles()
    })
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
function handleFormSubmit(e) {
    e.preventDefault()

    const formData = {
        name: document.getElementById('profileName').value.trim(),
        type: document.getElementById('proxyType').value,
        host: document.getElementById('proxyHost').value.trim(),
        port: document.getElementById('proxyPort').value.trim(),
        username: document.getElementById('proxyUsername').value.trim(),
        password: document.getElementById('proxyPassword').value.trim(),
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!formData.name || !formData.host || !formData.port) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
        return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
    const port = parseInt(formData.port)
    if (isNaN(port) || port < 1 || port > 65535) {
        alert('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535')
        return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –¥–æ–º–µ–Ω–∞
    const ipPattern = /^(\d{1,3}\.){3}\d{1,3}$/
    const domainPattern = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])*$/

    if (!ipPattern.test(formData.host) && !domainPattern.test(formData.host)) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è')
        return
    }

    if (editingProfileId) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        const index = profiles.findIndex((p) => p.id === editingProfileId)
        if (index !== -1) {
            profiles[index] = { ...formData, id: editingProfileId }

            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (editingProfileId === activeProfileId) {
                activateProfile(editingProfileId)
            }
        }
    } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        const newProfile = {
            ...formData,
            id: Date.now().toString(),
        }
        profiles.push(newProfile)
    }

    saveProfiles()
    renderProfiles()
    hideProfileForm()
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∏–º–ø–æ—Ä—Ç–∞
function showImportForm() {
    importForm.classList.remove('hidden')
    addProfileBtn.style.display = 'none'
}

// –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∏–º–ø–æ—Ä—Ç–∞
function hideImportForm() {
    importForm.classList.add('hidden')
    addProfileBtn.style.display = 'block'
    importText.value = ''
}

// –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
function parseProxy(line) {
    line = line.trim()
    if (!line) return null

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ: –ø—Ä–æ–∫—Å–∏")
    let customName = null
    const colonIndex = line.indexOf(':')
    if (colonIndex > 0) {
        const beforeColon = line.substring(0, colonIndex)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ IP –∞–¥—Ä–µ—Å –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç @ (—á–∞—Å—Ç—å user:pass@)
        if ((!beforeColon.match(/^\d+\.\d+\.\d+\.\d+$/) && !line.includes('@')) || line.indexOf('@') > colonIndex) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –µ—Å—Ç—å –µ—â–µ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –¥–≤–æ–µ—Ç–æ—á–∏–µ (–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–∫—Å–∏)
            const afterColon = line.substring(colonIndex + 1)
            if (afterColon.includes(':')) {
                customName = beforeColon.trim()
                line = afterColon.trim()
            }
        }
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    const patterns = [
        // user:pass@ip:port
        /^([^:]+):([^@]+)@([^:]+):(\d+)$/,
        // ip:port:user:pass
        /^([^:]+):(\d+):([^:]+):(.+)$/,
        // user:pass:ip:port
        /^([^:]+):([^:]+):([^:]+):(\d+)$/,
        // ip:port (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        /^([^:]+):(\d+)$/,
    ]

    let result = null

    // user:pass@ip:port
    let match = line.match(patterns[0])
    if (match) {
        result = {
            username: match[1],
            password: match[2],
            host: match[3],
            port: match[4],
        }
    }

    // ip:port:user:pass
    if (!result) {
        match = line.match(patterns[1])
        if (match && !isNaN(match[2])) {
            result = {
                host: match[1],
                port: match[2],
                username: match[3],
                password: match[4],
            }
        }
    }

    // user:pass:ip:port
    if (!result) {
        match = line.match(patterns[2])
        if (match && !isNaN(match[4])) {
            result = {
                username: match[1],
                password: match[2],
                host: match[3],
                port: match[4],
            }
        }
    }

    // ip:port (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    if (!result) {
        match = line.match(patterns[3])
        if (match) {
            result = {
                host: match[1],
                port: match[2],
                username: '',
                password: '',
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (result && customName) {
        result.customName = customName
    }

    return result
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
function processImport() {
    const text = importText.value.trim()
    if (!text) return

    const lines = text.split('\n')
    let imported = 0
    let firstImportedId = null

    lines.forEach((line, index) => {
        const proxyData = parseProxy(line)
        if (proxyData) {
            const newProfile = {
                name: proxyData.customName || `–ü—Ä–æ–∫—Å–∏ ${profiles.length + imported + 1}`,
                type: proxyData.type || 'http',
                host: proxyData.host,
                port: proxyData.port,
                username: proxyData.username,
                password: proxyData.password,
                id: Date.now().toString() + index,
            }
            profiles.push(newProfile)

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            if (imported === 0) {
                firstImportedId = newProfile.id
            }

            imported++
        }
    })

    if (imported > 0) {
        saveProfiles()
        renderProfiles()
        hideImportForm()

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        showConfirmDialog(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${imported}\n\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å?`, () => {
            if (firstImportedId) {
                activateProfile(firstImportedId)
            }
        })
    } else {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.')
    }
}
