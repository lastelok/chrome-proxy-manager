// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    // –°—Ç–∞—Ç—É—Å
    statusIndicator: document.getElementById('statusIndicator'),
    quickToggleBtn: document.getElementById('quickToggleBtn'),
    versionInfo: document.getElementById('versionInfo'),

    // –ü—Ä–æ—Ñ–∏–ª–∏
    profilesList: document.getElementById('profilesList'),
    profilesCount: document.getElementById('profilesCount'),
    addProfileBtn: document.getElementById('addProfileBtn'),

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    importBtn: document.getElementById('importBtn'),
    exportBtn: document.getElementById('exportBtn'),
    openSidePanelBtn: document.getElementById('openSidePanelBtn'),

    // –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è
    profileForm: document.getElementById('profileForm'),
    proxyForm: document.getElementById('proxyForm'),
    formTitle: document.getElementById('formTitle'),
    closeFormBtn: document.getElementById('closeFormBtn'),
    cancelBtn: document.getElementById('cancelBtn'),

    // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
    profileId: document.getElementById('profileId'),
    profileName: document.getElementById('profileName'),
    proxyType: document.getElementById('proxyType'),
    proxyHost: document.getElementById('proxyHost'),
    proxyPort: document.getElementById('proxyPort'),
    useAuth: document.getElementById('useAuth'),
    authFields: document.getElementById('authFields'),
    proxyUsername: document.getElementById('proxyUsername'),
    proxyPassword: document.getElementById('proxyPassword'),

    // –ò–º–ø–æ—Ä—Ç
    importForm: document.getElementById('importForm'),
    closeImportBtn: document.getElementById('closeImportBtn'),
    cancelImportBtn: document.getElementById('cancelImportBtn'),
    processImportBtn: document.getElementById('processImportBtn'),
    importText: document.getElementById('importText'),

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmModal: document.getElementById('confirmModal'),
    confirmMessage: document.getElementById('confirmMessage'),
    confirmYes: document.getElementById('confirmYes'),
    confirmNo: document.getElementById('confirmNo'),
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let state = {
    profiles: [],
    activeProfileId: null,
    editingProfileId: null,
    confirmCallback: null,
    geoCache: new Map(),
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', init)

function init() {
    loadProfiles()
    updateStatus()
    bindEvents()
    loadGeoCache()
    loadVersionInfo()
    addDebugButton()
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
function addDebugButton() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
    if (document.getElementById('debugBtn')) return

    const debugBtn = document.createElement('button')
    debugBtn.id = 'debugBtn'
    debugBtn.className = 'debug-btn'
    debugBtn.title = '–û—Ç–ª–∞–¥–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
    debugBtn.innerHTML = `
        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="3"/>
            <path d="M12 1v6m0 6v6"/>
            <path d="m21 12-6 0m-6 0-6 0"/>
        </svg>
    `
    
    debugBtn.addEventListener('click', showDebugInfo)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ header
    const headerRight = document.querySelector('.header-right')
    headerRight.insertBefore(debugBtn, headerRight.firstChild)
}

// –ü–æ–∫–∞–∑ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function showDebugInfo() {
    chrome.runtime.sendMessage({ action: 'debugAuth' }, (response) => {
        if (response?.success) {
            const debug = response.debug
            let message = `üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\n`
            message += `üì° –ü—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–µ–Ω: ${debug.isActive ? '–î–ê' : '–ù–ï–¢'}\n`
            
            if (debug.currentProfile) {
                message += `üìã –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: ${debug.currentProfile.name}\n`
                message += `üåê –•–æ—Å—Ç: ${debug.currentProfile.host}:${debug.currentProfile.port}\n`
                message += `üîó –¢–∏–ø: ${debug.currentProfile.type || 'http'}\n`
                message += `üë§ –õ–æ–≥–∏–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ: ${debug.currentProfile.username || '–ù–ï –ó–ê–î–ê–ù'}\n`
                message += `üîê –ü–∞—Ä–æ–ª—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ: ${debug.currentProfile.password ? '–ó–ê–î–ê–ù' : '–ù–ï –ó–ê–î–ê–ù'}\n`
            } else {
                message += `üìã –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: –ù–ï–¢\n`
            }
            
            if (debug.authCredentials) {
                message += `\nüîë –ê–ö–¢–ò–í–ù–´–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï:\n`
                message += `üë§ –õ–æ–≥–∏–Ω: ${debug.authCredentials.username || '–ù–ï –ó–ê–î–ê–ù'}\n`
                message += `üîê –ü–∞—Ä–æ–ª—å: ${debug.authCredentials.password ? '–ó–ê–î–ê–ù (' + debug.authCredentials.password.length + ' —Å–∏–º–≤–æ–ª–æ–≤)' : '–ù–ï –ó–ê–î–ê–ù'}\n`
            } else {
                message += `\nüîë –ê–ö–¢–ò–í–ù–´–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï: –ù–ï –ó–ê–î–ê–ù–´\n`
            }
            
            if (debug.pendingAuthCredentials) {
                message += `\n‚è≥ –û–ñ–ò–î–ê–Æ–©–ò–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï:\n`
                message += `üë§ –õ–æ–≥–∏–Ω: ${debug.pendingAuthCredentials.username || '–ù–ï –ó–ê–î–ê–ù'}\n`
                message += `üîê –ü–∞—Ä–æ–ª—å: ${debug.pendingAuthCredentials.password ? '–ó–ê–î–ê–ù' : '–ù–ï –ó–ê–î–ê–ù'}\n`
            }
            
            message += `\nüÜò –ï–°–õ–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢:\n`
            message += `1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è\n`
            message += `2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (chrome://extensions/)\n`
            message += `3. –û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏\n`
            message += `4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n\n`
            message += `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å httpbin.org/ip –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`
            
            showConfirmDialog(message)
        } else {
            showConfirmDialog('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        }
    })
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function loadGeoCache() {
    chrome.storage.local.get(['geoCache'], (result) => {
        if (result.geoCache) {
            state.geoCache = new Map(Object.entries(result.geoCache))
        }
    })
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
function loadVersionInfo() {
    const manifest = chrome.runtime.getManifest()
    if (manifest && manifest.version) {
        elements.versionInfo.textContent = `v${manifest.version}`
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function getGeoLocation(ip) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
    if (state.geoCache.has(ip)) {
        const cached = state.geoCache.get(ip)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (24 —á–∞—Å–∞)
        if (cached.lastUpdated && Date.now() - cached.lastUpdated < 24 * 60 * 60 * 1000) {
            return cached
        }
    }

    return new Promise((resolve) => {
        chrome.runtime.sendMessage({ action: 'getGeoLocation', ip }, (response) => {
            if (chrome.runtime.lastError) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', chrome.runtime.lastError)
                resolve({
                    country: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    countryCode: null,
                    city: null,
                    timezone: null
                })
                return
            }

            if (response?.success && response.data) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                state.geoCache.set(ip, response.data)
                resolve(response.data)
            } else {
                resolve({
                    country: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    countryCode: null,
                    city: null,
                    timezone: null
                })
            }
        })
    })
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–ª–∞–≥–∞
function getFlagUrl(countryCode) {
    if (!countryCode) return null
    return `https://flagcdn.com/24x18/${countryCode}.png`
}

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
function bindEvents() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    elements.addProfileBtn.addEventListener('click', showAddProfileForm)
    elements.quickToggleBtn.addEventListener('click', handleQuickToggle)
    elements.importBtn.addEventListener('click', showImportForm)
    elements.exportBtn.addEventListener('click', exportProfiles)
    elements.openSidePanelBtn.addEventListener('click', openInSidePanel)

    // –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è
    elements.proxyForm.addEventListener('submit', handleFormSubmit)
    elements.closeFormBtn.addEventListener('click', hideProfileForm)
    elements.cancelBtn.addEventListener('click', hideProfileForm)
    elements.useAuth.addEventListener('change', toggleAuthFields)

    // –ò–º–ø–æ—Ä—Ç
    elements.closeImportBtn.addEventListener('click', hideImportForm)
    elements.cancelImportBtn.addEventListener('click', hideImportForm)
    elements.processImportBtn.addEventListener('click', processImport)

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elements.confirmYes.addEventListener('click', handleConfirmYes)
    elements.confirmNo.addEventListener('click', handleConfirmNo)

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    elements.profileForm.addEventListener('click', (e) => {
        if (e.target === elements.profileForm) hideProfileForm()
    })

    elements.importForm.addEventListener('click', (e) => {
        if (e.target === elements.importForm) hideImportForm()
    })

    elements.confirmModal.addEventListener('click', (e) => {
        if (e.target === elements.confirmModal) handleConfirmNo()
    })

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    document.addEventListener('keydown', handleKeyDown)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
function handleKeyDown(e) {
    if (e.key === 'Escape') {
        if (!elements.confirmModal.classList.contains('hidden')) {
            handleConfirmNo()
        } else if (!elements.profileForm.classList.contains('hidden')) {
            hideProfileForm()
        } else if (!elements.importForm.classList.contains('hidden')) {
            hideImportForm()
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
function loadProfiles() {
    chrome.storage.local.get(['profiles', 'activeProfileId'], (result) => {
        state.profiles = result.profiles || []
        state.activeProfileId = result.activeProfileId || null
        renderProfiles()
    })
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
function saveProfiles() {
    chrome.storage.local.set({
        profiles: state.profiles,
        activeProfileId: state.activeProfileId,
    })
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus() {
    chrome.runtime.sendMessage({ action: 'getStatus' }, (response) => {
        if (chrome.runtime.lastError) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', chrome.runtime.lastError)
            return
        }

        const statusTitle = elements.statusIndicator.querySelector('.status-title')
        const statusSubtitle = elements.statusIndicator.querySelector('.status-subtitle')

        if (response?.isActive && response?.currentProfile) {
            elements.statusIndicator.classList.add('active')
            elements.quickToggleBtn.classList.add('active')
            statusTitle.textContent = `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${response.currentProfile.name}`
            statusSubtitle.textContent = response.currentProfile.host
            state.activeProfileId = response.currentProfile.id

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            localStorage.setItem('lastActiveProfile', response.currentProfile.id)
        } else {
            elements.statusIndicator.classList.remove('active')
            elements.quickToggleBtn.classList.remove('active')
            statusTitle.textContent = '–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'
            statusSubtitle.textContent = '–ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω'
            state.activeProfileId = null
        }

        renderProfiles()
    })
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
function renderProfiles() {
    const count = state.profiles.length
    elements.profilesCount.textContent = count
    elements.profilesList.innerHTML = ''

    if (count === 0) {
        elements.profilesList.innerHTML = `
            <div class="empty-state">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                    <circle cx="12" cy="12" r="10"/>
                    <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"/>
                    <path d="M2 12h20"/>
                </svg>
                <div>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π</div>
                <div style="font-size: 12px; margin-top: 4px;">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</div>
            </div>
        `
        return
    }

    const sortedProfiles = [...state.profiles].sort((a, b) => a.name.localeCompare(b.name))

    sortedProfiles.forEach((profile) => {
        const profileElement = createProfileElement(profile)
        elements.profilesList.appendChild(profileElement)
    })
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
function createProfileElement(profile) {
    const isActive = profile.id === state.activeProfileId

    const element = document.createElement('div')
    element.className = `profile-card ${isActive ? 'active' : ''}`
    element.dataset.id = profile.id

    element.innerHTML = `
        <div class="profile-header">
            <div class="profile-name">${escapeHtml(profile.name)}</div>
            <div class="profile-actions">
                <button class="profile-action-btn copy-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                    </svg>
                </button>
                <button class="profile-action-btn edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                    </svg>
                </button>
                <button class="profile-action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="3 6 5 6 21 6"/>
                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                    </svg>
                </button>
            </div>
        </div>
        <div class="profile-details">
            <span class="profile-type ${profile.type || 'http'}">${(profile.type || 'http').toUpperCase()}</span>
            <span>${escapeHtml(profile.host)}:${profile.port}</span>
            ${profile.username ? '<span class="auth-indicator">üîê</span>' : ''}
            <div class="geo-info" data-ip="${profile.host}">
                <span class="geo-loading">üåç</span>
            </div>
        </div>
    `

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    loadGeolocationForElement(element, profile.host)

    // –°–æ–±—ã—Ç–∏—è
    element.addEventListener('click', (e) => {
        if (!e.target.closest('.profile-actions')) {
            activateProfile(profile.id)
        }
    })

    element.querySelector('.copy-btn').addEventListener('click', (e) => {
        e.stopPropagation()
        copyProfile(profile)
    })

    element.querySelector('.edit-btn').addEventListener('click', (e) => {
        e.stopPropagation()
        editProfile(profile.id)
    })

    element.querySelector('.delete-btn').addEventListener('click', (e) => {
        e.stopPropagation()
        deleteProfile(profile.id)
    })

    return element
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
async function loadGeolocationForElement(element, ip) {
    const geoInfoElement = element.querySelector('.geo-info')
    
    try {
        const geoData = await getGeoLocation(ip)
        
        if (geoData.countryCode) {
            const flagUrl = getFlagUrl(geoData.countryCode)
            const countryInfo = geoData.city ? `${geoData.city}, ${geoData.country}` : geoData.country
            
            geoInfoElement.innerHTML = `
                <img src="${flagUrl}" 
                     alt="${geoData.country}" 
                     class="country-flag" 
                     title="${countryInfo}"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='inline'">
                <span class="country-name" style="display: none">${geoData.country}</span>
            `
        } else {
            geoInfoElement.innerHTML = `<span class="country-name">${geoData.country}</span>`
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
        geoInfoElement.innerHTML = '<span class="country-name">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</span>'
    }
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function activateProfile(profileId) {
    const profile = state.profiles.find((p) => p.id === profileId)
    if (!profile) return

    console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å:', {
        name: profile.name,
        host: profile.host,
        port: profile.port,
        hasAuth: !!(profile.username && profile.password),
        username: profile.username || '–ù–ï–¢',
        password: profile.password ? '***' : '–ù–ï–¢'
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const hasAuth = profile.username && profile.password

    const profileElement = document.querySelector(`[data-id="${profileId}"]`)
    if (profileElement) {
        profileElement.classList.add('loading')
    }

    // –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    chrome.runtime.sendMessage({ action: 'applyProxy', profile: profile }, (response) => {
        if (profileElement) {
            profileElement.classList.remove('loading')
        }

        if (response?.success) {
            state.activeProfileId = profileId
            saveProfiles()
            updateStatus()
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            if (hasAuth) {
                showToast('–ü—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
            } else {
                showToast('–ü—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω')
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
            }
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', response?.error)
            showConfirmDialog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É: ' + (response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        }
    })
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
function disableProxy() {
    chrome.runtime.sendMessage({ action: 'disableProxy' }, (response) => {
        if (response?.success) {
            state.activeProfileId = null
            saveProfiles()
            updateStatus()
        }
    })
}

// –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
function handleQuickToggle() {
    if (state.activeProfileId) {
        console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏')
        disableProxy()
    } else if (state.profiles.length > 0) {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const lastProfileId = localStorage.getItem('lastActiveProfile')
        const profileToActivate = lastProfileId && state.profiles.find((p) => p.id === lastProfileId) ? lastProfileId : state.profiles[0].id
        
        const profile = state.profiles.find((p) => p.id === profileToActivate)
        console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:', {
            name: profile?.name,
            hasAuth: !!(profile?.username && profile?.password)
        })
        
        activateProfile(profileToActivate)
    } else {
        console.log('‚ûï –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è')
        showAddProfileForm()
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function copyProfile(profile) {
    let text = ''
    if (profile.type && profile.type !== 'http') {
        text += `${profile.type.toUpperCase()} `
    }

    if (profile.username && profile.password) {
        text += `${profile.username}:${profile.password}@${profile.host}:${profile.port}`
    } else {
        text += `${profile.host}:${profile.port}`
    }

    navigator.clipboard
        .writeText(text)
        .then(() => {
            showToast('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
        })
        .catch(() => {
            showConfirmDialog('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
        })
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function showAddProfileForm() {
    state.editingProfileId = null
    elements.formTitle.textContent = '–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å'
    elements.proxyForm.reset()
    elements.proxyType.value = 'http'
    elements.useAuth.checked = false
    toggleAuthFields()
    elements.profileForm.classList.remove('hidden')

    setTimeout(() => {
        elements.profileName.focus()
    }, 100)
}

// –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
function hideProfileForm() {
    elements.profileForm.classList.add('hidden')
    elements.proxyForm.reset()
    state.editingProfileId = null
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function toggleAuthFields() {
    if (elements.useAuth.checked) {
        elements.authFields.classList.remove('hidden')
    } else {
        elements.authFields.classList.add('hidden')
        elements.proxyUsername.value = ''
        elements.proxyPassword.value = ''
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
async function handleFormSubmit(e) {
    e.preventDefault()

    const formData = {
        name: elements.profileName.value.trim(),
        type: elements.proxyType.value,
        host: elements.proxyHost.value.trim(),
        port: elements.proxyPort.value.trim(),
        username: elements.useAuth.checked ? elements.proxyUsername.value.trim() : '',
        password: elements.useAuth.checked ? elements.proxyPassword.value.trim() : '',
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name || !formData.host || !formData.port) {
        showConfirmDialog('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
        return
    }

    const port = parseInt(formData.port)
    if (isNaN(port) || port < 1 || port > 65535) {
        showConfirmDialog('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535')
        return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
    const duplicate = state.profiles.find((p) => p.name.toLowerCase() === formData.name.toLowerCase() && p.id !== state.editingProfileId)

    if (duplicate) {
        showConfirmDialog('–ü—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    }

    if (state.editingProfileId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const index = state.profiles.findIndex((p) => p.id === state.editingProfileId)
        if (index !== -1) {
            state.profiles[index] = { ...formData, id: state.editingProfileId }

            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            if (state.editingProfileId === state.activeProfileId) {
                activateProfile(state.editingProfileId)
            }
        }
    } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
        const newProfile = { ...formData, id: Date.now().toString() }
        state.profiles.push(newProfile)
    }

    saveProfiles()
    renderProfiles()
    hideProfileForm()

    showToast(state.editingProfileId ? '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω')
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function editProfile(profileId) {
    const profile = state.profiles.find((p) => p.id === profileId)
    if (!profile) return

    state.editingProfileId = profileId
    elements.formTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'

    elements.profileName.value = profile.name
    elements.proxyType.value = profile.type || 'http'
    elements.proxyHost.value = profile.host
    elements.proxyPort.value = profile.port

    const hasAuth = profile.username || profile.password
    elements.useAuth.checked = hasAuth

    if (hasAuth) {
        elements.proxyUsername.value = profile.username || ''
        elements.proxyPassword.value = profile.password || ''
    }

    toggleAuthFields()
    elements.profileForm.classList.remove('hidden')

    setTimeout(() => {
        elements.profileName.focus()
    }, 100)
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function deleteProfile(profileId) {
    const profile = state.profiles.find((p) => p.id === profileId)
    if (!profile) return

    showConfirmDialog(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å "${profile.name}"?`, () => {
        state.profiles = state.profiles.filter((p) => p.id !== profileId)

        if (state.activeProfileId === profileId) {
            disableProxy()
        }

        saveProfiles()
        renderProfiles()
        showToast('–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω')
    })
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞
function showImportForm() {
    elements.importForm.classList.remove('hidden')
    setTimeout(() => {
        elements.importText.focus()
    }, 100)
}

// –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞
function hideImportForm() {
    elements.importForm.classList.add('hidden')
    elements.importText.value = ''
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
function generateUniqueImportName(baseName, counter) {
    const existingNames = state.profiles.map(p => p.name.toLowerCase())
    let name = baseName
    
    if (counter > 1) {
        name = `${baseName} ${counter}`
    }
    
    // –ï—Å–ª–∏ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if (existingNames.includes(name.toLowerCase())) {
        return generateUniqueImportName(baseName, counter + 1)
    }
    
    return name
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏
function parseProxyLine(line) {
    line = line.trim()
    if (!line) return null

    let customName = null
    let proxyType = 'http'

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (—Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ;–æ—Å—Ç–∞–ª—å–Ω–∞—è_—á–∞—Å—Ç—å)
    // –¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (line.includes(';')) {
        const nameMatch = line.match(/^([^;]+);(.+)$/)
        if (nameMatch) {
            customName = nameMatch[1].trim()
            line = nameMatch[2].trim()
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
    const typeMatch = line.match(/^(socks5|socks4|http|https)\s+(.+)$/i)
    if (typeMatch) {
        proxyType = typeMatch[1].toLowerCase()
        line = typeMatch[2].trim()
    }

    let result = null

    // user:pass@host:port - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    const authFormat1 = line.match(/^([^:@\s]+):([^@\s]+)@([^:\s]+):(\d+)$/)
    if (authFormat1) {
        result = {
            username: authFormat1[1],
            password: authFormat1[2], 
            host: authFormat1[3],
            port: authFormat1[4],
            type: proxyType,
        }
    }

    // host:port:user:pass
    if (!result) {
        const authFormat2 = line.match(/^([^:\s]+):(\d+):([^:\s]+):(.+)$/)
        if (authFormat2) {
            result = {
                host: authFormat2[1],
                port: authFormat2[2],
                username: authFormat2[3],
                password: authFormat2[4],
                type: proxyType,
            }
        }
    }

    // host:port
    if (!result) {
        const simpleFormat = line.match(/^([^:\s]+):(\d+)$/)
        if (simpleFormat) {
            result = {
                host: simpleFormat[1],
                port: simpleFormat[2],
                username: '',
                password: '',
                type: proxyType,
            }
        }
    }

    if (result && customName) {
        result.customName = customName
    }

    return result
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
async function processImport() {
    const text = elements.importText.value.trim()
    if (!text) {
        showConfirmDialog('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
        return
    }

    const lines = text.split('\n')
    let imported = 0
    let skipped = 0
    let firstProfileId = null
    let importCounter = 1
    let errors = []

    for (let index = 0; index < lines.length; index++) {
        const line = lines[index]
        const parsed = parseProxyLine(line)

        if (parsed) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            const exists = state.profiles.some(
                (p) => p.host === parsed.host && p.port === parsed.port && (p.username || '') === (parsed.username || '')
            )

            if (exists) {
                skipped++
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: –ü—Ä–æ–∫—Å–∏ ${parsed.host}:${parsed.port} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                continue
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            let profileName
            if (parsed.customName) {
                profileName = generateUniqueImportName(parsed.customName, 1)
            } else {
                profileName = generateUniqueImportName('–ü—Ä–æ–∫—Å–∏', importCounter)
                importCounter++
            }

            const newProfile = {
                name: profileName,
                type: parsed.type,
                host: parsed.host,
                port: parsed.port,
                username: parsed.username || '',
                password: parsed.password || '',
                id: `${Date.now()}_${index}`,
            }

            state.profiles.push(newProfile)

            if (imported === 0) {
                firstProfileId = newProfile.id
            }

            imported++
        } else if (line.trim()) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            errors.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: "${line.trim()}"`)
            skipped++
        }
    }

    if (imported > 0) {
        saveProfiles()
        renderProfiles()
        hideImportForm()

        let message = `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`
        if (skipped > 0) {
            message += `\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`
        }
        message += '\n\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å?'

        showConfirmDialog(message, () => {
            if (firstProfileId) {
                activateProfile(firstProfileId)
            }
        })
    } else {
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.'
        
        if (errors.length > 0) {
            errorMessage += '\n\n–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:\n' + errors.slice(0, 5).join('\n')
            if (errors.length > 5) {
                errorMessage += `\n... –∏ –µ—â—ë ${errors.length - 5} —Å—Ç—Ä–æ–∫`
            }
        }
        
        showConfirmDialog(errorMessage)
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
function exportProfiles() {
    if (state.profiles.length === 0) {
        showConfirmDialog('–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
        return
    }

    let exportText = ''
    state.profiles.forEach((profile) => {
        let line = `${profile.name};`

        if (profile.type && profile.type !== 'http') {
            line += `${profile.type.toUpperCase()} `
        }

        if (profile.username && profile.password) {
            line += `${profile.username}:${profile.password}@${profile.host}:${profile.port}`
        } else {
            line += `${profile.host}:${profile.port}`
        }

        exportText += line + '\n'
    })

    const blob = new Blob([exportText], { type: 'text/plain;charset=utf-8' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')

    link.href = url
    link.download = `proxy-profiles-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)

    showToast(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${state.profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`)
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function openInSidePanel() {
    chrome.windows.getCurrent((currentWindow) => {
        chrome.runtime.sendMessage({ action: 'openSidePanel', windowId: currentWindow.id }, (response) => {
            if (response?.success) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                if (chrome.extension.getViews({ type: 'popup' }).length > 0) {
                    chrome.extension.getViews({ type: 'popup' })[0].close()
                }
            } else {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:', response?.error)
                showToast('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏')
            }
        })
    })
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function showConfirmDialog(message, callback = null) {
    elements.confirmMessage.textContent = message
    state.confirmCallback = callback
    elements.confirmModal.classList.remove('hidden')

    if (callback) {
        elements.confirmYes.style.display = 'inline-flex'
        elements.confirmNo.textContent = '–ù–µ—Ç'
        elements.confirmYes.textContent = '–î–∞'
    } else {
        elements.confirmYes.style.display = 'inline-flex'
        elements.confirmNo.style.display = 'none'
        elements.confirmYes.textContent = '–û–ö'
    }
}

function handleConfirmYes() {
    elements.confirmModal.classList.add('hidden')
    if (state.confirmCallback) {
        state.confirmCallback()
        state.confirmCallback = null
    }
    resetConfirmModal()
}

function handleConfirmNo() {
    elements.confirmModal.classList.add('hidden')
    state.confirmCallback = null
    resetConfirmModal()
}

function resetConfirmModal() {
    elements.confirmYes.textContent = '–î–∞'
    elements.confirmNo.textContent = '–ù–µ—Ç'
    elements.confirmYes.style.display = 'inline-flex'
    elements.confirmNo.style.display = 'inline-flex'
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (toast)
function showToast(message, type = 'success') {
    const toast = document.createElement('div')
    const backgroundColor = type === 'error' ? '#ef4444' : 'var(--success)'
    
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: ${backgroundColor};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        z-index: 2000;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        animation: slideDown 0.3s ease-out;
    `
    toast.textContent = message

    document.body.appendChild(toast)

    const duration = type === 'error' ? 4000 : 2500
    
    setTimeout(() => {
        toast.style.animation = 'slideUp 0.3s ease-out forwards'
        setTimeout(() => {
            if (toast.parentNode) {
                document.body.removeChild(toast)
            }
        }, 300)
    }, duration)
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div')
    div.textContent = text
    return div.innerHTML
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background —Å–∫—Ä–∏–ø—Ç–∞
chrome.runtime.onMessage.addListener((message) => {
    if (message.action === 'proxyError') {
        showConfirmDialog(`–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:\n${message.error}`)
    } else if (message.action === 'proxyConnectionError') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        showToast(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${message.error}`, 'error')
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏:', message.error)
    }
})

// –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
const debugStyles = document.createElement('style')
debugStyles.textContent = `
    .debug-btn {
        padding: 6px;
        border: none;
        background: var(--secondary);
        color: var(--text-secondary);
        border-radius: 6px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        margin-right: 8px;
    }
    
    .debug-btn:hover {
        background: var(--hover-bg);
        color: var(--text-primary);
    }
`
document.head.appendChild(debugStyles)

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ toast
const style = document.createElement('style')
style.textContent = `
    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }
    
    @keyframes slideUp {
        from {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        to {
            opacity: 0;
            transform: translateX(-50%) translateY(-20px);
        }
    }
`
document.head.appendChild(style)