// WebRTC –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP
;(function () {
    'use strict'

    let isWebRTCBlocked = false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    chrome.storage.local.get(['webrtcBlocked'], (result) => {
        isWebRTCBlocked = result.webrtcBlocked !== false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
        if (isWebRTCBlocked) {
            console.log('üõ°Ô∏è WebRTC –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
            blockWebRTC()
        }
    })

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    chrome.storage.onChanged.addListener((changes) => {
        if (changes.webrtcBlocked) {
            isWebRTCBlocked = changes.webrtcBlocked.newValue
            if (isWebRTCBlocked) {
                console.log('üõ°Ô∏è WebRTC –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞')
                blockWebRTC()
            } else {
                console.log('üîì WebRTC –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è WebRTC
                window.location.reload()
            }
        }
    })

    function blockWebRTC() {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º RTCPeerConnection
        if (window.RTCPeerConnection) {
            window.RTCPeerConnection = function () {
                throw new Error('RTCPeerConnection –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏')
            }
        }

        if (window.webkitRTCPeerConnection) {
            window.webkitRTCPeerConnection = function () {
                throw new Error('webkitRTCPeerConnection –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏')
            }
        }

        if (window.mozRTCPeerConnection) {
            window.mozRTCPeerConnection = function () {
                throw new Error('mozRTCPeerConnection –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏')
            }
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º getUserMedia
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia = function () {
                return Promise.reject(new Error('getUserMedia –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏'))
            }
        }

        if (navigator.getUserMedia) {
            navigator.getUserMedia = function () {
                throw new Error('getUserMedia –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏')
            }
        }

        if (navigator.webkitGetUserMedia) {
            navigator.webkitGetUserMedia = function () {
                throw new Error('webkitGetUserMedia –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏')
            }
        }

        if (navigator.mozGetUserMedia) {
            navigator.mozGetUserMedia = function () {
                throw new Error('mozGetUserMedia –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏')
            }
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º enumerateDevices
        if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
            navigator.mediaDevices.enumerateDevices = function () {
                return Promise.resolve([])
            }
        }

        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –∏–∑ window
        delete window.RTCPeerConnection
        delete window.webkitRTCPeerConnection
        delete window.mozRTCPeerConnection
        delete window.RTCSessionDescription
        delete window.RTCIceCandidate
        delete window.webkitRTCSessionDescription
        delete window.webkitRTCIceCandidate

        console.log('‚úÖ WebRTC API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    }
})()
