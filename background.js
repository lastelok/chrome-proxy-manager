// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
let proxyState = {
    currentProxy: null,
    authCredentials: null,
    isActive: false,
}

// –ö–µ—à –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
let geoCache = new Map()

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
const EXTENSION_ID = chrome.runtime.id
const generateRuleId = (index) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    let hash = 0
    for (let i = 0; i < EXTENSION_ID.length; i++) {
        const char = EXTENSION_ID.charCodeAt(i)
        hash = (hash << 5) - hash + char
        hash = hash & hash // Convert to 32bit integer
    }
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    return Math.abs(hash % 1000000) + index
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø—Ä–∞–≤–∏–ª
const RULE_IDS = Array.from({ length: 5 }, (_, i) => generateRuleId(i + 1))

console.log('üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø—Ä–∞–≤–∏–ª:', RULE_IDS)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
chrome.runtime.onInstalled.addListener((details) => {
    if (details.reason === 'install') {
        console.log('Chrome Proxy Manager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    } else if (details.reason === 'update') {
        console.log('Chrome Proxy Manager –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–µ—Ä—Å–∏–∏:', details.previousVersion)
    }
    initializeExtension()
    setupSidePanel()
})

chrome.runtime.onStartup.addListener(() => {
    initializeExtension()
})

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function setupSidePanel() {
    chrome.sidePanel
        .setPanelBehavior({
            openPanelOnActionClick: false,
        })
        .catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:', err)
        })
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
async function initializeExtension() {
    try {
        // –û—á–∏—â–∞–µ–º –í–°–ï –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await clearAllDynamicRules()

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const result = await chrome.storage.local.get(['activeProfile', 'activeProfileId', 'geoCache'])

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–µ—à –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if (result.geoCache) {
            geoCache = new Map(Object.entries(result.geoCache))
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        const config = await chrome.proxy.settings.get({})
        const isProxyCurrentlyActive = config.value && config.value.mode !== 'direct' && config.value.mode !== 'system'

        if (result.activeProfile && result.activeProfileId) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            proxyState.currentProxy = result.activeProfile
            proxyState.authCredentials = {
                username: result.activeProfile.username || '',
                password: result.activeProfile.password || '',
            }
            proxyState.isActive = true

            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', {
                username: proxyState.authCredentials.username || '–ù–ï –£–ö–ê–ó–ê–ù',
                password: proxyState.authCredentials.password || '–ù–ï –£–ö–ê–ó–ê–ù',
                host: result.activeProfile.host,
                port: result.activeProfile.port,
            })

            if (!isProxyCurrentlyActive) {
                await applyProxyProfile(result.activeProfile)
            } else {
                updateBadge(true)
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                if (result.activeProfile.username && result.activeProfile.password) {
                    await setupProxyAuthRules()
                }
            }
        } else {
            proxyState.isActive = isProxyCurrentlyActive
            updateBadge(proxyState.isActive)
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
        updateBadge(false)
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
async function getGeoLocation(ip) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (geoCache.has(ip)) {
        return geoCache.get(ip)
    }

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const response = await fetch(`http://ip-api.com/json/${ip}?fields=status,country,countryCode,city,timezone`)

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`)
        }

        const data = await response.json()

        if (data.status === 'success') {
            const geoInfo = {
                country: data.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                countryCode: data.countryCode ? data.countryCode.toLowerCase() : null,
                city: data.city || null,
                timezone: data.timezone || null,
                lastUpdated: Date.now(),
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            geoCache.set(ip, geoInfo)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –≤ storage (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞)
            if (geoCache.size > 100) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                const entries = Array.from(geoCache.entries())
                entries.sort((a, b) => (a[1].lastUpdated || 0) - (b[1].lastUpdated || 0))

                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 50 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                geoCache.clear()
                entries.slice(-50).forEach(([key, value]) => {
                    geoCache.set(key, value)
                })
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
            await saveGeoCache()

            return geoInfo
        } else {
            throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultGeo = {
            country: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            countryCode: null,
            city: null,
            timezone: null,
            lastUpdated: Date.now(),
        }

        geoCache.set(ip, defaultGeo)
        return defaultGeo
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function saveGeoCache() {
    try {
        const cacheObject = Object.fromEntries(geoCache)
        await chrome.storage.local.set({ geoCache: cacheObject })
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ —Ç—É–ª–±–∞—Ä–µ
function updateBadge(isActive) {
    proxyState.isActive = isActive

    const badgeText = isActive ? '‚óè' : '‚óã'
    const badgeColor = isActive ? '#10b981' : '#ef4444'
    const title = `Chrome Proxy Manager - ${isActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}`

    chrome.action.setBadgeText({ text: badgeText })
    chrome.action.setBadgeBackgroundColor({ color: badgeColor })
    chrome.action.setTitle({ title })
}

// –û—á–∏—Å—Ç–∫–∞ –í–°–ï–• –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
async function clearAllDynamicRules() {
    try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –í–°–ï –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞...')

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        const existingRules = await chrome.declarativeNetRequest.getDynamicRules()

        if (existingRules.length > 0) {
            const allRuleIds = existingRules.map((rule) => rule.id)
            await chrome.declarativeNetRequest.updateDynamicRules({
                removeRuleIds: allRuleIds,
            })
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª:', allRuleIds.length)
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª:', error)
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ declarativeNetRequest
async function setupProxyAuthRules() {
    try {
        console.log('üîß === –ù–ê–ß–ê–õ–û –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ê–í–ò–õ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===')

        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞
        await clearProxyAuthRules()

        if (!proxyState.authCredentials || !proxyState.authCredentials.username || !proxyState.authCredentials.password) {
            console.log('üîê –ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            return false
        }

        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:')
        console.log('   –õ–æ–≥–∏–Ω:', proxyState.authCredentials.username)
        console.log('   –ü–∞—Ä–æ–ª—å:', proxyState.authCredentials.password)
        console.log('   –î–ª–∏–Ω–∞ –ª–æ–≥–∏–Ω–∞:', proxyState.authCredentials.username.length)
        console.log('   –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:', proxyState.authCredentials.password.length)

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è Base64
        const authString = `${proxyState.authCredentials.username}:${proxyState.authCredentials.password}`
        console.log('üîó –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', authString)

        const credentials = btoa(authString)
        console.log('üîë Base64 —Å—Ç—Ä–æ–∫–∞:', credentials)
        console.log('üîë –ü–æ–ª–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:', `Basic ${credentials}`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const decoded = atob(credentials)
        console.log('üîì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:', decoded)
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç?', decoded === authString)

        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
        const rules = [
            {
                id: RULE_IDS[0],
                priority: 1,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: [
                        'main_frame',
                        'sub_frame',
                        'stylesheet',
                        'script',
                        'image',
                        'font',
                        'object',
                        'xmlhttprequest',
                        'ping',
                        'media',
                        'websocket',
                        'other',
                    ],
                },
            },
        ]

        console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ:', JSON.stringify(rules[0], null, 2))

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
        await chrome.declarativeNetRequest.updateDynamicRules({
            addRules: rules,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        const activeRules = await chrome.declarativeNetRequest.getDynamicRules()
        const ourRule = activeRules.find((rule) => rule.id === RULE_IDS[0])

        if (ourRule) {
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
            console.log('üìã –î–µ—Ç–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞:', JSON.stringify(ourRule, null, 2))
            console.log('üîê === –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ê–í–ò–õ –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===')
            return true
        } else {
            throw new Error('–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        try {
            const existingRules = await chrome.declarativeNetRequest.getDynamicRules()
            console.log('üîç –í—Å–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:', existingRules.length)
            console.log(
                'üîç ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:',
                existingRules.map((r) => r.id)
            )
        } catch (diagError) {
            console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', diagError)
        }

        return false
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function clearProxyAuthRules() {
    try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏...')

        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞
        await chrome.declarativeNetRequest.updateDynamicRules({
            removeRuleIds: RULE_IDS,
        })

        console.log('üóëÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã')
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
async function applyProxyProfile(profile) {
    try {
        if (!profile || !profile.host || !profile.port) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è')
        }

        console.log('üîÑ === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–†–û–ö–°–ò ===')
        console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å:', {
            name: profile.name,
            host: profile.host,
            port: profile.port,
            type: profile.type || 'http',
            username: profile.username || '–ù–ï –£–ö–ê–ó–ê–ù',
            password: profile.password || '–ù–ï –£–ö–ê–ó–ê–ù',
        })

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await chrome.proxy.settings.clear({})
        await clearProxyAuthRules()

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        await new Promise((resolve) => setTimeout(resolve, 100))

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        proxyState.authCredentials = {
            username: profile.username || '',
            password: profile.password || '',
        }

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:')
        console.log('   –õ–æ–≥–∏–Ω:', proxyState.authCredentials.username || '–ü–£–°–¢–û')
        console.log('   –ü–∞—Ä–æ–ª—å:', proxyState.authCredentials.password || '–ü–£–°–¢–û')

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        const proxyConfig = {
            mode: 'fixed_servers',
            rules: {
                singleProxy: {
                    scheme: profile.type || 'http',
                    host: profile.host,
                    port: parseInt(profile.port),
                },
                bypassList: ['localhost', '127.0.0.1', '::1', '<local>'],
            },
        }

        console.log('üì° –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏:', JSON.stringify(proxyConfig, null, 2))

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        await chrome.proxy.settings.set({
            value: proxyConfig,
            scope: 'regular',
        })

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let authSuccess = true
        if (profile.username && profile.password) {
            console.log('üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
            authSuccess = await setupProxyAuthRules()

            if (!authSuccess) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–æ –ø—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å')
            }
        } else {
            console.log('üìù –ü—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        proxyState.currentProxy = profile
        proxyState.isActive = true
        updateBadge(true)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await chrome.storage.local.set({
            activeProfile: profile,
            activeProfileId: profile.id,
        })

        console.log('‚úÖ === –ü–†–û–ö–°–ò –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù ===')
        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error)
        await disableProxy()
        return {
            success: false,
            error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        }
    }
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
async function disableProxy() {
    try {
        await chrome.proxy.settings.clear({})
        await clearProxyAuthRules()

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        proxyState.currentProxy = null
        proxyState.authCredentials = null
        proxyState.isActive = false
        updateBadge(false)

        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await chrome.storage.local.remove(['activeProfile', 'activeProfileId'])

        console.log('üîå –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω')
        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏',
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
chrome.webRequest.onErrorOccurred.addListener(
    (details) => {
        if (proxyState.isActive && details.error) {
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏
            if (
                details.error.includes('ERR_PROXY_AUTH_UNSUPPORTED') ||
                details.error.includes('ERR_PROXY_CONNECTION_FAILED') ||
                details.error.includes('ERR_TUNNEL_CONNECTION_FAILED')
            ) {
                console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', {
                    url: details.url.substring(0, 50) + '...',
                    error: details.error,
                    type: details.type,
                })

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                if (details.error.includes('ERR_PROXY_AUTH_UNSUPPORTED')) {
                    notifyConnectionError('–ü—Ä–æ–∫—Å–∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
                } else if (details.error.includes('ERR_TUNNEL_CONNECTION_FAILED')) {
                    notifyConnectionError('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É')
                }
            }
        }
    },
    { urls: ['<all_urls>'] }
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
chrome.webRequest.onAuthRequired.addListener(
    (details, callback) => {
        console.log('üîë === –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –û–¢ –ü–†–û–ö–°–ò ===')
        console.log('üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
            url: details.url.substring(0, 50) + '...',
            isProxy: details.isProxy,
            realm: details.realm,
            scheme: details.scheme,
            challenger: details.challenger,
        })

        if (details.isProxy && proxyState.authCredentials && proxyState.authCredentials.username && proxyState.authCredentials.password) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
            console.log('   –õ–æ–≥–∏–Ω:', proxyState.authCredentials.username)
            console.log('   –ü–∞—Ä–æ–ª—å:', proxyState.authCredentials.password)

            callback({
                authCredentials: {
                    username: proxyState.authCredentials.username,
                    password: proxyState.authCredentials.password,
                },
            })

            console.log('‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
        } else {
            console.log('‚ùå –ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            console.log('   isProxy:', details.isProxy)
            console.log('   –ï—Å—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', !!proxyState.authCredentials)
            console.log('   –õ–æ–≥–∏–Ω:', proxyState.authCredentials?.username || '–ù–ï–¢')
            console.log('   –ü–∞—Ä–æ–ª—å:', proxyState.authCredentials?.password || '–ù–ï–¢')
            callback({})
        }
    },
    { urls: ['<all_urls>'] },
    ['asyncBlocking']
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
function getStatus() {
    return {
        isActive: proxyState.isActive,
        currentProfile: proxyState.currentProxy,
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
async function openSidePanel(windowId) {
    try {
        await chrome.sidePanel.open({ windowId })
        return { success: true }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:', error)
        return {
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏',
        }
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function notifyConnectionError(errorMessage) {
    chrome.runtime
        .sendMessage({
            action: 'proxyConnectionError',
            error: errorMessage,
            fatal: false,
        })
        .catch(() => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        })
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
function notifyError(errorMessage) {
    chrome.runtime
        .sendMessage({
            action: 'proxyError',
            error: errorMessage,
        })
        .catch(() => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        })
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup/sidepanel
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    switch (request.action) {
        case 'applyProxy':
            console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:', request.profile)
            applyProxyProfile(request.profile)
                .then((result) => sendResponse(result))
                .catch((error) =>
                    sendResponse({
                        success: false,
                        error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏',
                    })
                )
            return true

        case 'disableProxy':
            disableProxy()
                .then((result) => sendResponse(result))
                .catch((error) =>
                    sendResponse({
                        success: false,
                        error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏',
                    })
                )
            return true

        case 'getStatus':
            sendResponse(getStatus())
            break

        case 'getGeoLocation':
            getGeoLocation(request.ip)
                .then((result) => sendResponse({ success: true, data: result }))
                .catch((error) =>
                    sendResponse({
                        success: false,
                        error: error.message || '–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
                    })
                )
            return true

        case 'openSidePanel':
            openSidePanel(request.windowId)
                .then((result) => sendResponse(result))
                .catch((error) =>
                    sendResponse({
                        success: false,
                        error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏',
                    })
                )
            return true

        case 'resetAuth':
            if (proxyState.currentProxy && proxyState.authCredentials) {
                setupProxyAuthRules()
                    .then(() =>
                        sendResponse({
                            success: true,
                            message: '–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã',
                        })
                    )
                    .catch(() =>
                        sendResponse({
                            success: false,
                            error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª',
                        })
                    )
            } else {
                sendResponse({
                    success: false,
                    error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏',
                })
            }
            return true

        case 'debugAuth':
            chrome.declarativeNetRequest
                .getDynamicRules()
                .then((rules) => {
                    const ourRules = rules.filter((rule) => RULE_IDS.includes(rule.id))

                    const debugInfo = {
                        isActive: proxyState.isActive,
                        currentProfile: proxyState.currentProxy,
                        authCredentials: {
                            username: proxyState.authCredentials?.username || '–ù–ï–¢',
                            password: proxyState.authCredentials?.password || '–ù–ï–¢',
                        },
                        declarativeRulesCount: ourRules.length,
                        totalRulesCount: rules.length,
                        ruleIds: RULE_IDS,
                        ourRules: ourRules,
                    }

                    console.log('üîç === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===')
                    console.log(JSON.stringify(debugInfo, null, 2))

                    sendResponse({
                        success: true,
                        debug: debugInfo,
                    })
                })
                .catch((error) =>
                    sendResponse({
                        success: false,
                        error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª',
                    })
                )
            return true

        default:
            sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' })
    }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
chrome.proxy.onProxyError.addListener((details) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', details)

    const errorMessage = details.error || '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞'
    notifyError(errorMessage)
})

console.log('üöÄ Chrome Proxy Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
console.log('üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: declarativeNetRequest + onAuthRequired')
console.log('üÜî ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:', EXTENSION_ID)
console.log('üìù –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏')
