// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
let proxyState = {
    currentProxy: null,
    authCredentials: null,
    isActive: false,
}

// –ö–µ—à –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
let geoCache = new Map()

// ID –ø—Ä–∞–≤–∏–ª –¥–ª—è declarativeNetRequest (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID)
const RULE_IDS = [1001, 1002, 1003, 1004, 1005]

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
chrome.runtime.onInstalled.addListener((details) => {
    if (details.reason === 'install') {
        console.log('Chrome Proxy Manager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    } else if (details.reason === 'update') {
        console.log('Chrome Proxy Manager –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–µ—Ä—Å–∏–∏:', details.previousVersion)
    }
    initializeExtension()
    setupSidePanel()
})

chrome.runtime.onStartup.addListener(() => {
    initializeExtension()
})

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function setupSidePanel() {
    chrome.sidePanel
        .setPanelBehavior({
            openPanelOnActionClick: false,
        })
        .catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:', err)
        })
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
async function initializeExtension() {
    try {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await clearProxyAuthRules()

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const result = await chrome.storage.local.get(['activeProfile', 'activeProfileId', 'geoCache'])

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–µ—à –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if (result.geoCache) {
            geoCache = new Map(Object.entries(result.geoCache))
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        const config = await chrome.proxy.settings.get({})
        const isProxyCurrentlyActive = config.value && config.value.mode !== 'direct' && config.value.mode !== 'system'

        if (result.activeProfile && result.activeProfileId) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            proxyState.currentProxy = result.activeProfile
            proxyState.authCredentials = {
                username: result.activeProfile.username || '',
                password: result.activeProfile.password || '',
            }
            proxyState.isActive = true

            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', {
                username: proxyState.authCredentials.username || '–ù–ï –£–ö–ê–ó–ê–ù',
                password: proxyState.authCredentials.password ? '***' : '–ù–ï –£–ö–ê–ó–ê–ù',
                host: result.activeProfile.host,
                port: result.activeProfile.port,
            })

            if (!isProxyCurrentlyActive) {
                await applyProxyProfile(result.activeProfile)
            } else {
                updateBadge(true)
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                if (result.activeProfile.username && result.activeProfile.password) {
                    await setupProxyAuthRules()
                }
            }
        } else {
            proxyState.isActive = isProxyCurrentlyActive
            updateBadge(proxyState.isActive)
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message || error)
        updateBadge(false)
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
async function getGeoLocation(ip) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (geoCache.has(ip)) {
        return geoCache.get(ip)
    }

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const response = await fetch(`http://ip-api.com/json/${ip}?fields=status,country,countryCode,city,timezone`)

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`)
        }

        const data = await response.json()

        if (data.status === 'success') {
            const geoInfo = {
                country: data.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                countryCode: data.countryCode ? data.countryCode.toLowerCase() : null,
                city: data.city || null,
                timezone: data.timezone || null,
                lastUpdated: Date.now(),
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            geoCache.set(ip, geoInfo)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –≤ storage (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞)
            if (geoCache.size > 100) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                const entries = Array.from(geoCache.entries())
                entries.sort((a, b) => (a[1].lastUpdated || 0) - (b[1].lastUpdated || 0))

                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 50 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                geoCache.clear()
                entries.slice(-50).forEach(([key, value]) => {
                    geoCache.set(key, value)
                })
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
            await saveGeoCache()

            return geoInfo
        } else {
            throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultGeo = {
            country: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            countryCode: null,
            city: null,
            timezone: null,
            lastUpdated: Date.now(),
        }

        geoCache.set(ip, defaultGeo)
        return defaultGeo
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function saveGeoCache() {
    try {
        const cacheObject = Object.fromEntries(geoCache)
        await chrome.storage.local.set({ geoCache: cacheObject })
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ —Ç—É–ª–±–∞—Ä–µ
function updateBadge(isActive) {
    proxyState.isActive = isActive

    const badgeText = isActive ? '‚óè' : '‚óã'
    const badgeColor = isActive ? '#10b981' : '#ef4444'
    const title = `Chrome Proxy Manager - ${isActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}`

    chrome.action.setBadgeText({ text: badgeText })
    chrome.action.setBadgeBackgroundColor({ color: badgeColor })
    chrome.action.setTitle({ title })
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ declarativeNetRequest
async function setupProxyAuthRules() {
    try {
        console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')

        // –°–Ω–∞—á–∞–ª–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        await clearProxyAuthRules()

        if (!proxyState.authCredentials || !proxyState.authCredentials.username || !proxyState.authCredentials.password) {
            console.log('üîê –ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            return
        }

        const credentials = btoa(`${proxyState.authCredentials.username}:${proxyState.authCredentials.password}`)
        console.log('üîë –°–æ–∑–¥–∞–µ–º Base64 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:', `Basic ${credentials.substring(0, 10)}...`)

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò —Ç–∏–ø–∞–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        const rules = [
            {
                id: RULE_IDS[0], // 1001
                priority: 100,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['main_frame', 'sub_frame'],
                },
            },
            {
                id: RULE_IDS[1], // 1002
                priority: 100,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['xmlhttprequest'],
                },
            },
            {
                id: RULE_IDS[2], // 1003
                priority: 100,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['script', 'stylesheet'],
                },
            },
            {
                id: RULE_IDS[3], // 1004
                priority: 100,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['image', 'media', 'font'],
                },
            },
            {
                id: RULE_IDS[4], // 1005
                priority: 100,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['other', 'websocket', 'object', 'ping'],
                },
            },
        ]

        console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å ID:', RULE_IDS)

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
        await chrome.declarativeNetRequest.updateDynamicRules({
            addRules: rules,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        const activeRules = await chrome.declarativeNetRequest.getDynamicRules()
        const ourRules = activeRules.filter((rule) => RULE_IDS.includes(rule.id))

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', ourRules.length)
        console.log('üîê –ó–∞–≥–æ–ª–æ–≤–∫–∏ Proxy-Authorization –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º')

        if (ourRules.length !== RULE_IDS.length) {
            throw new Error(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${ourRules.length} –∏–∑ ${RULE_IDS.length} –ø—Ä–∞–≤–∏–ª`)
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message || error)

        // –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
        try {
            const existingRules = await chrome.declarativeNetRequest.getDynamicRules()
            console.log(
                'üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:',
                existingRules.map((r) => r.id)
            )
        } catch (diagError) {
            console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', diagError.message || diagError)
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function clearProxyAuthRules() {
    try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        const existingRules = await chrome.declarativeNetRequest.getDynamicRules()

        // –ò—â–µ–º –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ ID
        const ourRuleIds = existingRules.filter((rule) => RULE_IDS.includes(rule.id)).map((rule) => rule.id)

        if (ourRuleIds.length > 0) {
            await chrome.declarativeNetRequest.updateDynamicRules({
                removeRuleIds: ourRuleIds,
            })
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ —Å ID:', ourRuleIds)
        } else {
            console.log('üìù –ù–∞—à–∏—Ö –ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ ID –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await chrome.declarativeNetRequest
            .updateDynamicRules({
                removeRuleIds: RULE_IDS,
            })
            .catch(() => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            })
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message || error)
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
async function applyProxyProfile(profile) {
    try {
        if (!profile || !profile.host || !profile.port) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è')
        }

        console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∫—Å–∏:', profile.name)

        // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await chrome.proxy.settings.clear({})
        await clearProxyAuthRules()

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        await new Promise((resolve) => setTimeout(resolve, 200))

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –î–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        proxyState.authCredentials = {
            username: profile.username || '',
            password: profile.password || '',
        }

        console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏:', {
            username: profile.username || '–ù–ï –£–ö–ê–ó–ê–ù',
            password: profile.password ? '***' : '–ù–ï –£–ö–ê–ó–ê–ù',
            host: profile.host,
            port: profile.port,
            profileName: profile.name,
        })

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        const proxyConfig = {
            mode: 'fixed_servers',
            rules: {
                singleProxy: {
                    scheme: profile.type || 'http',
                    host: profile.host,
                    port: parseInt(profile.port),
                },
                bypassList: ['localhost', '127.0.0.1', '::1', '<local>'],
            },
        }

        console.log('üì° –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏:', proxyConfig)

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        await chrome.proxy.settings.set({
            value: proxyConfig,
            scope: 'regular',
        })

        // –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ü–û–°–õ–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        if (profile.username && profile.password) {
            console.log('üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', profile.username)
            await setupProxyAuthRules()
        } else {
            console.log('üìù –ü—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        proxyState.currentProxy = profile
        proxyState.isActive = true
        updateBadge(true)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await chrome.storage.local.set({
            activeProfile: profile,
            activeProfileId: profile.id,
        })

        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω:', profile.name)
        console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —á–µ—Ä–µ–∑ declarativeNetRequest')

        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error.message || error)
        notifyError(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏')
        return { success: false, error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }
    }
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
async function disableProxy() {
    try {
        await chrome.proxy.settings.clear({})
        await clearProxyAuthRules()

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        proxyState.currentProxy = null
        proxyState.authCredentials = null
        proxyState.isActive = false
        updateBadge(false)

        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await chrome.storage.local.remove(['activeProfile', 'activeProfileId'])

        console.log('üîå –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω')
        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error.message || error)
        notifyError(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏')
        return { success: false, error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏' }
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è fetch API (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
const originalFetch = globalThis.fetch
globalThis.fetch = async function (input, init = {}) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    if (proxyState.authCredentials && proxyState.authCredentials.username && proxyState.authCredentials.password) {
        const headers = new Headers(init.headers || {})

        if (!headers.has('Proxy-Authorization')) {
            const credentials = btoa(`${proxyState.authCredentials.username}:${proxyState.authCredentials.password}`)
            headers.set('Proxy-Authorization', `Basic ${credentials}`)
            init.headers = headers
            console.log('üîê [FETCH] –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ Proxy-Authorization')
        }
    }

    try {
        return await originalFetch.call(this, input, init)
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
        if (error.message && (error.message.includes('ERR_PROXY_AUTH') || error.message.includes('407'))) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –≤ fetch:', error.message)
        }
        throw error
    }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
chrome.webRequest.onErrorOccurred.addListener(
    (details) => {
        if (
            proxyState.isActive &&
            details.error &&
            (details.error.includes('PROXY') || details.error.includes('ERR_PROXY') || details.error.includes('407'))
        ) {
            console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', {
                url: details.url.substring(0, 100),
                error: details.error,
                tabId: details.tabId,
            })

            // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            if (details.error.includes('ERR_PROXY_AUTH') || details.error.includes('407')) {
                console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏! –ü—Ä–∞–≤–∏–ª–∞ declarativeNetRequest –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç')

                // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞
                setTimeout(() => {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
                    setupProxyAuthRules()
                }, 2000)

                chrome.runtime
                    .sendMessage({
                        action: 'proxyAuthError',
                        error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...',
                    })
                    .catch(() => {})
            } else {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏
                chrome.runtime
                    .sendMessage({
                        action: 'proxyConnectionError',
                        error: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${details.error}`,
                        fatal: false,
                    })
                    .catch(() => {})
            }
        }
    },
    { urls: ['<all_urls>'] }
)

// –ë–õ–û–ö–ò–†–£–ï–ú onAuthRequired –ø–æ–ª–Ω–æ—Å—Ç—å—é - –µ—Å–ª–∏ –æ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
chrome.webRequest.onAuthRequired.addListener(
    (details) => {
        if (details.isProxy) {
            console.error('üí• –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—è–≤–∏–ª—Å—è –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü—Ä–∞–≤–∏–ª–∞ declarativeNetRequest –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!')
            console.error('üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
                url: details.url.substring(0, 100),
                challenger: details.challenger,
                isProxy: details.isProxy,
            })

            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notifyError('–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É declarativeNetRequest.')

            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞
            setTimeout(() => {
                console.log('üîÑ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
                setupProxyAuthRules()
            }, 1000)
        }
    },
    { urls: ['<all_urls>'] }
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
function getStatus() {
    return {
        isActive: proxyState.isActive,
        currentProfile: proxyState.currentProxy,
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
async function openSidePanel(windowId) {
    try {
        await chrome.sidePanel.open({ windowId })
        return { success: true }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:', error.message || error)
        return { success: false, error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏' }
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫)
function notifyError(errorMessage) {
    const message = typeof errorMessage === 'string' ? errorMessage : errorMessage?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'

    chrome.runtime
        .sendMessage({
            action: 'proxyError',
            error: message,
        })
        .catch(() => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function resetAuthAttempts() {
    console.log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (proxyState.currentProxy && proxyState.authCredentials) {
        setupProxyAuthRules()
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup/sidepanel
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    switch (request.action) {
        case 'applyProxy':
            applyProxyProfile(request.profile)
                .then((result) => sendResponse(result))
                .catch((error) => sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏' }))
            return true

        case 'disableProxy':
            disableProxy()
                .then((result) => sendResponse(result))
                .catch((error) => sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏' }))
            return true

        case 'getStatus':
            sendResponse(getStatus())
            break

        case 'getGeoLocation':
            getGeoLocation(request.ip)
                .then((result) => sendResponse({ success: true, data: result }))
                .catch((error) => sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏' }))
            return true

        case 'openSidePanel':
            openSidePanel(request.windowId)
                .then((result) => sendResponse(result))
                .catch((error) => sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏' }))
            return true

        case 'resetAuth':
            resetAuthAttempts()
            sendResponse({ success: true, message: '–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã' })
            break

        case 'debugAuth':
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö
            chrome.declarativeNetRequest
                .getDynamicRules()
                .then((rules) => {
                    const ourRules = rules.filter((rule) => RULE_IDS.includes(rule.id))

                    console.log('üîç === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===')
                    console.log('üîÄ –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏:', proxyState.isActive)
                    console.log('üìã –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:', proxyState.currentProxy)
                    console.log('üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
                        username: proxyState.authCredentials?.username || '–ù–ï –ó–ê–î–ê–ù',
                        password: proxyState.authCredentials?.password ? '–ó–ê–î–ê–ù' : '–ù–ï –ó–ê–î–ê–ù',
                        fullObject: proxyState.authCredentials,
                    })
                    console.log('üìú –ü—Ä–∞–≤–∏–ª–∞ declarativeNetRequest (–Ω–∞—à–∏):', ourRules.length)
                    console.log('üìú –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ declarativeNetRequest:', rules.length)
                    console.log('üîß –î–µ—Ç–∞–ª–∏ –Ω–∞—à–∏—Ö –ø—Ä–∞–≤–∏–ª:', ourRules)
                    console.log('üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ ID:', RULE_IDS)
                    console.log('================================')

                    sendResponse({
                        success: true,
                        debug: {
                            isActive: proxyState.isActive,
                            currentProfile: proxyState.currentProxy,
                            authCredentials: proxyState.authCredentials,
                            declarativeRulesCount: ourRules.length,
                            totalRulesCount: rules.length,
                            ruleIds: RULE_IDS,
                            manifestVersion: 3,
                            authMethod: 'declarativeNetRequest (–ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–π)',
                        },
                    })
                })
                .catch((error) => {
                    sendResponse({
                        success: false,
                        error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª',
                    })
                })
            return true

        default:
            sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' })
    }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫)
chrome.proxy.onProxyError.addListener((details) => {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', {
        error: details.error,
        details: details.details,
        fatal: details.fatal,
    })

    if (details.fatal) {
        const errorMessage = details.error || '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞'
        notifyError(errorMessage)

        chrome.runtime
            .sendMessage({
                action: 'proxyConnectionError',
                error: errorMessage,
                fatal: details.fatal,
            })
            .catch(() => {})
    }
})

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
chrome.proxy.settings.onChange.addListener((details) => {
    console.log('‚öôÔ∏è –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏:', details)

    const isProxyActive = details.value && details.value.mode !== 'direct' && details.value.mode !== 'system'

    // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (!isProxyActive && proxyState.currentProxy) {
        console.log('üîå –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ')
        proxyState.currentProxy = null
        proxyState.authCredentials = null
        proxyState.isActive = false
        clearProxyAuthRules()
        updateBadge(false)

        chrome.storage.local.remove(['activeProfile', 'activeProfileId']).catch((err) => console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message || err))
    } else if (isProxyActive && !proxyState.currentProxy) {
        // –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ
        console.log('üîó –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ')
        proxyState.isActive = true
        updateBadge(true)
    }
})

console.log('üöÄ Chrome Proxy Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Manifest V3')
console.log('üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è declarativeNetRequest –¥–ª—è –ü–†–ï–í–ï–ù–¢–ò–í–ù–û–ô –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
console.log('üÜî –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø—Ä–∞–≤–∏–ª:', RULE_IDS)
console.log('‚ú® –ó–∞–≥–æ–ª–æ–≤–∫–∏ Proxy-Authorization –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤')
console.log('üö´ –î–∏–∞–ª–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—á–µ–∑–Ω—É—Ç—å!')
