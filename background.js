// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
let proxyState = {
    currentProxy: null,
    authCredentials: null,
    isActive: false,
}

// –ö–µ—à –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
let geoCache = new Map()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
chrome.runtime.onInstalled.addListener((details) => {
    if (details.reason === 'install') {
        console.log('Chrome Proxy Manager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    } else if (details.reason === 'update') {
        console.log('Chrome Proxy Manager –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–µ—Ä—Å–∏–∏:', details.previousVersion)
    }
    initializeExtension()
    setupSidePanel()
})

chrome.runtime.onStartup.addListener(() => {
    initializeExtension()
})

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
function setupSidePanel() {
    chrome.sidePanel
        .setPanelBehavior({
            openPanelOnActionClick: false,
        })
        .catch((err) => {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:', err)
        })
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
async function initializeExtension() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const result = await chrome.storage.local.get(['activeProfile', 'activeProfileId', 'geoCache'])
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–µ—à –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if (result.geoCache) {
            geoCache = new Map(Object.entries(result.geoCache))
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        const config = await chrome.proxy.settings.get({})
        const isProxyCurrentlyActive = config.value && config.value.mode !== 'direct' && config.value.mode !== 'system'

        if (result.activeProfile && result.activeProfileId) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            proxyState.currentProxy = result.activeProfile
            proxyState.authCredentials = {
                username: result.activeProfile.username || '',
                password: result.activeProfile.password || '',
            }
            proxyState.isActive = true
            
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', {
                username: proxyState.authCredentials.username || '–ù–ï –£–ö–ê–ó–ê–ù',
                password: proxyState.authCredentials.password ? '***' : '–ù–ï –£–ö–ê–ó–ê–ù',
                host: result.activeProfile.host,
                port: result.activeProfile.port
            })

            if (!isProxyCurrentlyActive) {
                await applyProxyProfile(result.activeProfile)
            } else {
                updateBadge(true)
            }
        } else {
            proxyState.isActive = isProxyCurrentlyActive
            updateBadge(proxyState.isActive)
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
        updateBadge(false)
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
async function getGeoLocation(ip) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (geoCache.has(ip)) {
        return geoCache.get(ip)
    }

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const response = await fetch(`http://ip-api.com/json/${ip}?fields=status,country,countryCode,city,timezone`)
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`)
        }

        const data = await response.json()
        
        if (data.status === 'success') {
            const geoInfo = {
                country: data.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                countryCode: data.countryCode ? data.countryCode.toLowerCase() : null,
                city: data.city || null,
                timezone: data.timezone || null,
                lastUpdated: Date.now()
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            geoCache.set(ip, geoInfo)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –≤ storage (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞)
            if (geoCache.size > 100) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                const entries = Array.from(geoCache.entries())
                entries.sort((a, b) => (a[1].lastUpdated || 0) - (b[1].lastUpdated || 0))
                
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 50 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                geoCache.clear()
                entries.slice(-50).forEach(([key, value]) => {
                    geoCache.set(key, value)
                })
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
            await saveGeoCache()
            
            return geoInfo
        } else {
            throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultGeo = {
            country: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            countryCode: null,
            city: null,
            timezone: null,
            lastUpdated: Date.now()
        }
        
        geoCache.set(ip, defaultGeo)
        return defaultGeo
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function saveGeoCache() {
    try {
        const cacheObject = Object.fromEntries(geoCache)
        await chrome.storage.local.set({ geoCache: cacheObject })
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ —Ç—É–ª–±–∞—Ä–µ
function updateBadge(isActive) {
    proxyState.isActive = isActive

    const badgeText = isActive ? '‚óè' : '‚óã'
    const badgeColor = isActive ? '#10b981' : '#ef4444'
    const title = `Chrome Proxy Manager - ${isActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}`

    chrome.action.setBadgeText({ text: badgeText })
    chrome.action.setBadgeBackgroundColor({ color: badgeColor })
    chrome.action.setTitle({ title })
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
async function applyProxyProfile(profile) {
    try {
        if (!profile || !profile.host || !profile.port) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è')
        }

        console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∫—Å–∏:', profile.name)

        // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        await chrome.proxy.settings.clear({})

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 100))

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –î–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        proxyState.authCredentials = {
            username: profile.username || '',
            password: profile.password || '',
        }

        console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏:', {
            username: profile.username || '–ù–ï –£–ö–ê–ó–ê–ù',
            password: profile.password ? '***' : '–ù–ï –£–ö–ê–ó–ê–ù',
            host: profile.host,
            port: profile.port,
            profileName: profile.name
        })

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        const proxyConfig = {
            mode: 'fixed_servers',
            rules: {
                singleProxy: {
                    scheme: profile.type || 'http',
                    host: profile.host,
                    port: parseInt(profile.port),
                },
                bypassList: ['localhost', '127.0.0.1', '::1', '<local>'],
            },
        }

        console.log('üì° –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏:', proxyConfig)

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await chrome.proxy.settings.set({
            value: proxyConfig,
            scope: 'regular',
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        proxyState.currentProxy = profile
        proxyState.isActive = true
        updateBadge(true)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await chrome.storage.local.set({
            activeProfile: profile,
            activeProfileId: profile.id,
        })

        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω:', profile.name)
        console.log('üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        
        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error)
        notifyError(error.message)
        return { success: false, error: error.message }
    }
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
async function disableProxy() {
    try {
        await chrome.proxy.settings.clear({})

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        proxyState.currentProxy = null
        proxyState.authCredentials = null
        proxyState.isActive = false
        updateBadge(false)

        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await chrome.storage.local.remove(['activeProfile', 'activeProfileId'])

        console.log('üîå –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω')
        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error)
        notifyError(error.message)
        return { success: false, error: error.message }
    }
}

// –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
let authAttempts = new Map()

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
chrome.webRequest.onAuthRequired.addListener(
    (details) => {
        console.log('üîë –ó–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!')
        console.log('üìç URL:', details.url)
        console.log('üîó Challenger:', details.challenger)
        console.log('üîÄ IsProxy:', details.isProxy)
        console.log('üîí Scheme:', details.scheme)
        console.log('üåê Realm:', details.realm)
        console.log('üÜî RequestId:', details.requestId)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∫—Å–∏-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if (!details.isProxy) {
            console.log('‚ùå –≠—Ç–æ –Ω–µ –ø—Ä–æ–∫—Å–∏-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
            return { cancel: false }
        }
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
        const proxyKey = `${details.challenger?.host || 'unknown'}:${details.challenger?.port || 'unknown'}`
        const attempts = authAttempts.get(proxyKey) || 0
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
        if (attempts >= 3) {
            console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏:', proxyKey)
            return { cancel: true }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (proxyState.authCredentials && proxyState.authCredentials.username && proxyState.authCredentials.password) {
            console.log('‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏:')
            console.log('üë§ Username:', proxyState.authCredentials.username)
            console.log('üîê Password: ***')
            console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å:', proxyState.currentProxy?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            console.log('üåê –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä:', proxyKey)
            console.log('‚è±Ô∏è –ü–æ–ø—ã—Ç–∫–∞:', attempts + 1)
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–∫—Å–∏
            authAttempts.set(proxyKey, attempts + 1)
            
            // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            setTimeout(() => {
                if (authAttempts.get(proxyKey) <= 3) {
                    authAttempts.delete(proxyKey)
                    console.log('üßπ –û—á–∏—â–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Å–∏:', proxyKey)
                }
            }, 30000)
            
            return {
                authCredentials: {
                    username: proxyState.authCredentials.username,
                    password: proxyState.authCredentials.password
                }
            }
        }
        
        console.log('‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∫—Å–∏')
        console.log('üìä –¢–µ–∫—É—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            hasCredentials: !!proxyState.authCredentials,
            hasUsername: !!(proxyState.authCredentials?.username),
            hasPassword: !!(proxyState.authCredentials?.password),
            profile: proxyState.currentProxy?.name || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è'
        })
        
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
        return { cancel: true }
    },
    { 
        urls: ['<all_urls>']
    },
    ['blocking']
)

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    if (authAttempts.size > 0) {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–º–µ—Ä:', authAttempts.size)
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
        const fiveMinutesAgo = Date.now() - 5 * 60 * 1000
        for (const [key, attempts] of authAttempts.entries()) {
            if (attempts >= 3) {
                authAttempts.delete(key)
            }
        }
    }
}, 60000)

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
chrome.webRequest.onBeforeRequest.addListener(
    (details) => {
        if (proxyState.isActive && proxyState.currentProxy && details.type === 'main_frame') {
            console.log('üì° –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', details.url.substring(0, 100))
        }
    },
    { urls: ['<all_urls>'] },
    []
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
function getStatus() {
    return {
        isActive: proxyState.isActive,
        currentProfile: proxyState.currentProxy,
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
async function openSidePanel(windowId) {
    try {
        await chrome.sidePanel.open({ windowId })
        return { success: true }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:', error)
        return { success: false, error: error.message }
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
function notifyError(errorMessage) {
    chrome.runtime
        .sendMessage({
            action: 'proxyError',
            error: errorMessage,
        })
        .catch(() => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
function resetAuthAttempts() {
    authAttempts.clear()
    console.log('üîÑ –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω')
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup/sidepanel
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    switch (request.action) {
        case 'applyProxy':
            // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
            resetAuthAttempts()
            applyProxyProfile(request.profile)
                .then((result) => sendResponse(result))
                .catch((error) => sendResponse({ success: false, error: error.message }))
            return true

        case 'disableProxy':
            resetAuthAttempts()
            disableProxy()
                .then((result) => sendResponse(result))
                .catch((error) => sendResponse({ success: false, error: error.message }))
            return true

        case 'getStatus':
            sendResponse(getStatus())
            break

        case 'getGeoLocation':
            getGeoLocation(request.ip)
                .then((result) => sendResponse({ success: true, data: result }))
                .catch((error) => sendResponse({ success: false, error: error.message }))
            return true

        case 'openSidePanel':
            openSidePanel(request.windowId)
                .then((result) => sendResponse(result))
                .catch((error) => sendResponse({ success: false, error: error.message }))
            return true

        case 'resetAuth':
            resetAuthAttempts()
            sendResponse({ success: true, message: '–°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω' })
            break

        case 'debugAuth':
            console.log('üîç === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===')
            console.log('üîÄ –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏:', proxyState.isActive)
            console.log('üìã –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:', proxyState.currentProxy)
            console.log('üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
                username: proxyState.authCredentials?.username || '–ù–ï –ó–ê–î–ê–ù',
                password: proxyState.authCredentials?.password ? '–ó–ê–î–ê–ù' : '–ù–ï –ó–ê–î–ê–ù',
                fullObject: proxyState.authCredentials
            })
            console.log('üî¢ –ü–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', Object.fromEntries(authAttempts))
            console.log('================================')
            
            sendResponse({ 
                success: true, 
                debug: {
                    isActive: proxyState.isActive,
                    currentProfile: proxyState.currentProxy,
                    authCredentials: proxyState.authCredentials,
                    authAttempts: Object.fromEntries(authAttempts)
                }
            })
            break

        default:
            sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' })
    }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
chrome.proxy.onProxyError.addListener((details) => {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', {
        error: details.error,
        details: details.details,
        fatal: details.fatal
    })

    if (details.fatal) {
        notifyError(details.error || '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞')
        
        chrome.runtime
            .sendMessage({
                action: 'proxyConnectionError',
                error: details.error || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É',
                fatal: details.fatal
            })
            .catch(() => {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            })
    }
})

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
chrome.proxy.settings.onChange.addListener((details) => {
    console.log('‚öôÔ∏è –ò–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏:', details)
    
    const isProxyActive = details.value && details.value.mode !== 'direct' && details.value.mode !== 'system'

    // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (!isProxyActive && proxyState.currentProxy) {
        console.log('üîå –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ')
        proxyState.currentProxy = null
        proxyState.authCredentials = null
        proxyState.isActive = false
        resetAuthAttempts()
        updateBadge(false)

        chrome.storage.local
            .remove(['activeProfile', 'activeProfileId'])
            .catch((err) => console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err))
    } else if (isProxyActive && !proxyState.currentProxy) {
        // –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ
        console.log('üîó –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω –∏–∑–≤–Ω–µ')
        proxyState.isActive = true
        updateBadge(true)
    }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
chrome.webRequest.onCompleted.addListener(
    (details) => {
        if (details.type === 'main_frame' && proxyState.isActive && details.statusCode === 200) {
            // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
            if (proxyState.currentProxy) {
                const proxyKey = `${proxyState.currentProxy.host}:${proxyState.currentProxy.port}`
                if (authAttempts.has(proxyKey)) {
                    authAttempts.delete(proxyKey)
                    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Å–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è:', proxyKey)
                }
            }
        }
    },
    { urls: ['<all_urls>'] }
)

console.log('üöÄ Chrome Proxy Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
console.log('üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞')
console.log('üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π')
