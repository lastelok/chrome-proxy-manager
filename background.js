// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
let proxyState = {
    activeProfile: null,
    isActive: false,
    authCredentials: null,
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª
const RULE_ID = 1

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ/–∑–∞–ø—É—Å–∫–µ
chrome.runtime.onInstalled.addListener(initExtension)
chrome.runtime.onStartup.addListener(initExtension)

async function initExtension() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const data = await chrome.storage.local.get(['activeProfile'])
    if (data.activeProfile) {
        await applyProxy(data.activeProfile)
    }
    updateBadge()
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
async function applyProxy(profile) {
    try {
        console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ—Ñ–∏–ª—å:', profile)

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await chrome.proxy.settings.clear({})

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        const config = {
            mode: 'fixed_servers',
            rules: {
                singleProxy: {
                    scheme: profile.type || 'http',
                    host: profile.host,
                    port: parseInt(profile.port),
                },
                bypassList: ['localhost', '127.0.0.1', '<local>'],
            },
        }

        await chrome.proxy.settings.set({ value: config, scope: 'regular' })
        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', config)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webRequestAuthProvider
        if (profile.username && profile.password) {
            proxyState.authCredentials = {
                username: profile.username,
                password: profile.password,
            }
            console.log('üîê –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è webRequestAuthProvider')
        } else {
            proxyState.authCredentials = null
            console.log('üìù –ü—Ä–æ–∫—Å–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        }

        proxyState.activeProfile = profile
        proxyState.isActive = true
        await chrome.storage.local.set({ activeProfile: profile })

        updateBadge() // –û–±–Ω–æ–≤–ª—è–µ–º badge –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        console.log('üéâ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω')
        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error)
        return { success: false, error: error.message }
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function setupMultipleAuthRules(username, password) {
    try {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è:', username)

        // –ö–æ–¥–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ ASCII —Å–∏–º–≤–æ–ª—ã
        const credentials = btoa(unescape(encodeURIComponent(`${username}:${password}`)))
        console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        const rules = [
            // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
            {
                id: RULE_ID,
                priority: 100,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['main_frame'],
                },
            },
            // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–¥—Ñ—Ä–µ–π–º–æ–≤ –∏ XHR
            {
                id: RULE_ID + 1,
                priority: 90,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['sub_frame', 'xmlhttprequest'],
                },
            },
            // –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            {
                id: RULE_ID + 2,
                priority: 80,
                action: {
                    type: 'modifyHeaders',
                    requestHeaders: [
                        {
                            header: 'Proxy-Authorization',
                            operation: 'set',
                            value: `Basic ${credentials}`,
                        },
                    ],
                },
                condition: {
                    resourceTypes: ['stylesheet', 'script', 'image', 'font', 'websocket', 'media', 'object', 'ping', 'other'],
                },
            },
        ]

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
        await chrome.declarativeNetRequest.updateDynamicRules({
            addRules: rules,
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        const activeRules = await chrome.declarativeNetRequest.getDynamicRules()
        const ourRules = activeRules.filter((r) => [RULE_ID, RULE_ID + 1, RULE_ID + 2].includes(r.id))

        console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${ourRules.length} –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª:', error)
        throw error
    }
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
async function disableProxy() {
    try {
        console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏...')

        await chrome.proxy.settings.clear({})

        proxyState.activeProfile = null
        proxyState.isActive = false
        proxyState.authCredentials = null

        await chrome.storage.local.remove(['activeProfile'])
        updateBadge() // –û–±–Ω–æ–≤–ª—è–µ–º badge –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω')
        return { success: true }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error)
        return { success: false, error: error.message }
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ declarativeNetRequest
async function setupAuthRules(username, password) {
    try {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è:', username)

        const credentials = btoa(`${username}:${password}`)
        console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª–∏–Ω–∞:', credentials.length)

        // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        const rule = {
            id: RULE_ID,
            priority: 10, // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            action: {
                type: 'modifyHeaders',
                requestHeaders: [
                    {
                        header: 'Proxy-Authorization',
                        operation: 'set',
                        value: `Basic ${credentials}`,
                    },
                ],
            },
            condition: {
                // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
                resourceTypes: [
                    'main_frame',
                    'sub_frame',
                    'stylesheet',
                    'script',
                    'image',
                    'font',
                    'xmlhttprequest',
                    'other',
                    'websocket',
                    'media',
                    'object',
                    'ping',
                ],
            },
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
        await chrome.declarativeNetRequest.updateDynamicRules({
            addRules: [rule],
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        const activeRules = await chrome.declarativeNetRequest.getDynamicRules()
        const ourRule = activeRules.find((r) => r.id === RULE_ID)

        if (ourRule) {
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
            console.log('–î–µ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∏–ª–∞:', ourRule)
        } else {
            console.error('‚ùå –ü—Ä–∞–≤–∏–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
        throw error
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function clearAuthRules() {
    try {
        await chrome.declarativeNetRequest.updateDynamicRules({
            removeRuleIds: [RULE_ID, RULE_ID + 1, RULE_ID + 2],
        })
        console.log('–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã')
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ (–ø—Ä–∞–≤–∏–ª–∞ –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
        console.log('–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏')
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (badge)
function updateBadge() {
    if (proxyState.isActive) {
        // –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω - –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –∏ —Ç–æ—á–∫–∞
        chrome.action.setBadgeText({ text: '‚óè' })
        chrome.action.setBadgeBackgroundColor({ color: '#10b981' }) // –ó–µ–ª–µ–Ω—ã–π
        chrome.action.setTitle({ title: `Proxy Manager - –ê–∫—Ç–∏–≤–µ–Ω: ${proxyState.activeProfile?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}` })
    } else {
        // –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω - –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –∏ —Ç–æ—á–∫–∞
        chrome.action.setBadgeText({ text: '‚óè' })
        chrome.action.setBadgeBackgroundColor({ color: '#f59e0b' }) // –ñ–µ–ª—Ç—ã–π
        chrome.action.setTitle({ title: 'Proxy Manager - –û—Ç–∫–ª—é—á–µ–Ω' })
    }

    console.log('üîÑ Badge –æ–±–Ω–æ–≤–ª–µ–Ω:', proxyState.isActive ? '–∑–µ–ª–µ–Ω—ã–π (–∞–∫—Ç–∏–≤–µ–Ω)' : '–∂–µ–ª—Ç—ã–π (–æ—Ç–∫–ª—é—á–µ–Ω)')
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —á–µ—Ä–µ–∑ webRequestAuthProvider)
chrome.webRequest.onAuthRequired.addListener(
    (details, callback) => {
        console.log('üîë –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏:', {
            url: details.url.substring(0, 50) + '...',
            isProxy: details.isProxy,
            challenger: details.challenger,
            realm: details.realm,
        })

        // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∫—Å–∏-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if (details.isProxy && proxyState.authCredentials) {
            console.log('‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏:', {
                username: proxyState.authCredentials.username,
                hasPassword: !!proxyState.authCredentials.password,
            })

            callback({
                authCredentials: {
                    username: proxyState.authCredentials.username,
                    password: proxyState.authCredentials.password,
                },
            })
        } else {
            console.log('‚ùå –ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å')
            callback({})
        }
    },
    { urls: ['<all_urls>'] },
    ['asyncBlocking']
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
chrome.proxy.onProxyError.addListener((details) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', details)
    if (details.error) {
        chrome.runtime
            .sendMessage({
                action: 'proxyError',
                error: details.error,
            })
            .catch(() => {})
    }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    switch (request.action) {
        case 'getStatus':
            sendResponse({
                isActive: proxyState.isActive,
                activeProfile: proxyState.activeProfile,
            })
            break

        case 'applyProxy':
            applyProxy(request.profile).then(sendResponse)
            return true

        case 'disableProxy':
            disableProxy().then(sendResponse)
            return true

        case 'updateBadge':
            updateBadge()
            sendResponse({ success: true })
            break
    }
})

console.log('Simple Proxy Manager –∑–∞–≥—Ä—É–∂–µ–Ω')
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ declarativeNetRequest')
console.log('–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π badge: –∂–µ–ª—Ç—ã–π (–æ—Ç–∫–ª—é—á–µ–Ω) / –∑–µ–ª–µ–Ω—ã–π (–≤–∫–ª—é—á–µ–Ω)')
